`include "src/cpu_defines.svinc"
//`include "src/group_0_instructions.svinc"
//`include "src/group_1_instructions.svinc"
//`include "src/group_2_instructions.svinc"
//`include "src/group_3_instructions.svinc"

package pkg_cpu;



typedef enum bit [`CPU_ENUM_FLAGS_POS_MSB_POS:0]
{
	FlagC,
	FlagZ,
	FlagV,
	FlagN
} FlagsPos;

typedef enum bit [`CPU_ENUM_ALU_OPER_SIZE_MSB_POS:0]
{
	Alu_Add,
	Alu_Adc,
	Alu_Sub,
	Alu_Sbc,
	Alu_Rsb,
	Alu_Mul,
	Alu_And,
	Alu_Or,
	Alu_Xor,
	Alu_Lsl,
	Alu_Lsr,
	Alu_Asr,
	Alu_Rol,
	Alu_Ror,

	Alu_Rlc,

	Alu_Rrc
} OperAlu;


typedef enum bit [`CPU_ENUM_SMALL_ALU_OPER_SIZE_MSB_POS:0]
{
	// Used mainly for ldst rA, [rB, rC, simm12]
	SmallAlu_AddThree,

	// Fused multiply-add
	SmallAlu_Fma
} OperSmallAlu;


// Alu Ports
typedef struct packed
{
	bit [`CPU_WORD_MSB_POS:0] a, b;
	bit [`CPU_ENUM_ALU_OPER_SIZE_MSB_POS:0] oper;
	bit [`CPU_FLAGS_MSB_POS:0] flags;
} StrcInAlu;

typedef struct packed
{
	bit [`CPU_WORD_MSB_POS:0] out;
	bit [`CPU_FLAGS_MSB_POS:0] flags;
} StrcOutAlu;

// SmallAlu Ports
typedef struct packed
{
	bit [`CPU_WORD_MSB_POS:0] a, b, c;
	bit [`CPU_ENUM_SMALL_ALU_OPER_SIZE_MSB_POS:0] oper;
} StrcInSmallAlu;

typedef struct packed
{
	bit [`CPU_WORD_MSB_POS:0] out;
} StrcOutSmallAlu;


//`define INSTR_STUFF(group, args, ident, str) \
//	ident``_``args``_``group,
//
//typedef enum bit [`CPU_ENUM_OPER_SIZE_MSB_POS:0]
//{
//	`LIST_OF_GROUP_0_INSTRUCTIONS
//	DummyOperG0
//} OperG0;
//
//typedef enum bit [`CPU_ENUM_OPER_SIZE_MSB_POS:0]
//{
//	`LIST_OF_GROUP_1_INSTRUCTIONS
//	DummyOperG1
//} OperG1;
//
//typedef enum bit [`CPU_ENUM_OPER_SIZE_MSB_POS:0]
//{
//	`LIST_OF_GROUP_2_INSTRUCTIONS
//	DummyOperG2
//} OperG2;
//
//typedef enum bit [`CPU_ENUM_OPER_SIZE_MSB_POS:0]
//{
//	`LIST_OF_GROUP_3_INSTRUCTIONS
//	DummyOperG3
//} OperG3;
//`undef INSTR_STUFF


typedef enum bit [`CPU_ENUM_OPER_SIZE_MSB_POS:0]
{
	// ldst rA, [rB]
	Ldr_LdStRaRb_0,
	Ldh_LdStRaRb_0,
	Ldsh_LdStRaRb_0,
	Ldb_LdStRaRb_0,
	Ldsb_LdStRaRb_0,
	Str_LdStRaRb_0,
	Sth_LdStRaRb_0,
	Stb_LdStRaRb_0,

	// rA <= rA op rB
	Add_RaRb_0,
	Adc_RaRb_0,
	Sub_RaRb_0,
	Sbc_RaRb_0,
	Rsb_RaRb_0,
	Mul_RaRb_0,
	And_RaRb_0,
	Or_RaRb_0,
	Xor_RaRb_0,
	Lsl_RaRb_0,
	Lsr_RaRb_0,
	Asr_RaRb_0,
	Rol_RaRb_0,
	Ror_RaRb_0,

	AddDotF_RaRb_0,
	AdcDotF_RaRb_0,
	SubDotF_RaRb_0,
	SbcDotF_RaRb_0,
	RsbDotF_RaRb_0,
	MulDotF_RaRb_0,
	AndDotF_RaRb_0,
	OrDotF_RaRb_0,
	XorDotF_RaRb_0,
	LslDotF_RaRb_0,
	LsrDotF_RaRb_0,
	AsrDotF_RaRb_0,
	RolDotF_RaRb_0,
	RorDotF_RaRb_0,

	// Rotate rB through carry, then store results in rA
	Rlc_RaRb_0,
	Rrc_RaRb_0,

	// Enable/disable interrupts
	Eni_NoArgs_0,
	Dii_NoArgs_0,

	// Return from interrupt
	Reti_NoArgs_0,

	// Jump to the Interrupt Return Address without affecting the status of
	// whether interrupts are enabled
	Jump_Ira_0,

	// cpy rA, ira
	Cpy_RaIra_0,

	// cpy ira, rA
	Cpy_IraRa_0,

	// push/pop flags
	Push_Flags_0,
	Pop_Flags_0,


	// cpy rA, flags
	Cpy_RaFlags_0,

	// flags, rA
	Cpy_FlagsRa_0,

	// call/jump to address contained in (rA + rB)
	Callx_RaRb_0,
	Jumpx_RaRb_0,

	// cpy rA, pc
	Cpy_RaPc_0,

	// cpy rA, rB
	Cpy_RaRb_0,

	// Sign extend
	Seh_RaRb_0,
	Seb_RaRb_0,

	// Compare rA to rB
	Cmp_RaRb_0

} OperG0;

typedef enum bit [`CPU_ENUM_OPER_SIZE_MSB_POS:0]
{
	// rA <= rB op (zero-extended 16-bit immediate)
	Addi_RaRbUImm16_1,
	Adci_RaRbUImm16_1,
	Subi_RaRbUImm16_1,
	Sbci_RaRbUImm16_1,
	Rsbi_RaRbUImm16_1,
	Muli_RaRbUImm16_1,
	Andi_RaRbUImm16_1,
	Ori_RaRbUImm16_1,
	Xori_RaRbUImm16_1,
	Lsli_RaRbUImm16_1,
	Lsri_RaRbUImm16_1,
	Asri_RaRbUImm16_1,
	Roli_RaRbUImm16_1,
	Rori_RaRbUImm16_1,

	AddiDotF_RaRbUImm16_1,
	AdciDotF_RaRbUImm16_1,
	SubiDotF_RaRbUImm16_1,
	SbciDotF_RaRbUImm16_1,
	RsbiDotF_RaRbUImm16_1,
	MuliDotF_RaRbUImm16_1,
	AndiDotF_RaRbUImm16_1,
	OriDotF_RaRbUImm16_1,
	XoriDotF_RaRbUImm16_1,
	LsliDotF_RaRbUImm16_1,
	LsriDotF_RaRbUImm16_1,
	AsriDotF_RaRbUImm16_1,
	RoliDotF_RaRbUImm16_1,
	RoriDotF_RaRbUImm16_1,

	// Branches
	Bra_Branch_1,
	Bnv_Branch_1,
	Bne_Branch_1,
	Beq_Branch_1,
	Bcc_Branch_1,
	Bcs_Branch_1,
	Bls_Branch_1,
	Bhi_Branch_1,
	Bpl_Branch_1,
	Bmi_Branch_1,
	Bvc_Branch_1,
	Bvs_Branch_1,
	Bge_Branch_1,
	Blt_Branch_1,
	Bgt_Branch_1,
	Ble_Branch_1,

	// rA <= rB ^ (sign-extended 16-bit immediate)
	Xorsi_RaRbSImm16_1,


	// rA[31:16] <= (zero-extended 16-bit immediate)
	Lui_RaUImm16_1
} OperG1;

typedef enum bit [`CPU_ENUM_OPER_SIZE_MSB_POS:0]
{
	// ldst rA, [rB, rC, (sign-extended 12-bit immediate)
	Ldr_LdStRaRbRcSImm12_2,
	Ldh_LdStRaRbRcSImm12_2,
	Ldsh_LdStRaRbRcSImm12_2,
	Ldb_LdStRaRbRcSImm12_2,
	Ldsb_LdStRaRbRcSImm12_2,
	Str_LdStRaRbRcSImm12_2,
	Sth_LdStRaRbRcSImm12_2,
	Stb_LdStRaRbRcSImm12_2,

	// rA <= rB op rC
	Add_RaRbRc_2,
	Adc_RaRbRc_2,
	Sub_RaRbRc_2,
	Sbc_RaRbRc_2,
	Rsb_RaRbRc_2,
	Mul_RaRbRc_2,
	And_RaRbRc_2,
	Or_RaRbRc_2,
	Xor_RaRbRc_2,
	Lsl_RaRbRc_2,
	Lsr_RaRbRc_2,
	Asr_RaRbRc_2,
	Rol_RaRbRc_2,
	Ror_RaRbRc_2,

	AddDotF_RaRbRc_2,
	AdcDotF_RaRbRc_2,
	SubDotF_RaRbRc_2,
	SbcDotF_RaRbRc_2,
	RsbDotF_RaRbRc_2,
	MulDotF_RaRbRc_2,
	AndDotF_RaRbRc_2,
	OrDotF_RaRbRc_2,
	XorDotF_RaRbRc_2,
	LslDotF_RaRbRc_2,
	LsrDotF_RaRbRc_2,
	AsrDotF_RaRbRc_2,
	RolDotF_RaRbRc_2,
	RorDotF_RaRbRc_2,

	// rA <= rA + (rB * rC)
	Fma_RaRbRc_2,

	// {rA, rB} <= {rC, rC}
	Cpyp_RaRbRc_2,

	// Block moves (1 to 4 registers)
	Stmdb_LdStBlock1To4_2,
	Ldmia_LdStBlock1To4_2,
	Stmia_LdStBlock1To4_2
} OperG2;


typedef enum bit [`CPU_ENUM_OPER_SIZE_MSB_POS:0]
{
	// ldst rA, [rB, (32-bit immediate)]
	Ldra_LdStRaRbImm32_3,
	Ldha_LdStRaRbImm32_3,
	Ldsha_LdStRaRbImm32_3,
	Ldba_LdStRaRbImm32_3,
	Ldsba_LdStRaRbImm32_3,
	Stra_LdStRaRbImm32_3,
	Stha_LdStRaRbImm32_3,
	Stba_LdStRaRbImm32_3,

	// call/jump to address contained in (rA + rB + (32-bit immediate))
	Calla_RaRbImm32_3,
	Jumpa_RaRbImm32_3,

	// {rA, rB} <= {(32-bit immediate), (same 32-bit immediate)}
	Cpypi_RaRbImm32_3,

	// Block moves (5 to 8 registers)
	Stmdb_LdStBlock5To8_3,
	Ldmia_LdStBlock5To8_3,
	Stmia_LdStBlock5To8_3,

	// Unsigned 32-bit * 32-bit -> 64-bit result multiply
	UMul_LongMul_3,

	// Signed 32-bit * 32-bit -> 64-bit result multiply
	SMul_LongMul_3,


	// Unsigned 64-bit by 64-bit -> 64-bit result divide and remainder
	UDivMod_LongDivMod_3,

	// Signed 64-bit by 64-bit -> 64-bit result divide and remainder
	SDivMod_LongDivMod_3,

	// Unsigned 32-bit by 32-bit -> 32-bit result divide and remainder
	UDivMod_DivMod_3,

	// Signed 32-bit by 32-bit -> 32-bit result divide and remainder
	SDivMod_DivMod_3,


	// 64-bit by 64-bit -> 64-bit result bitshift
	Lsl_LongBitShift_3,
	Lsr_LongBitShift_3,
	Asr_LongBitShift_3
} OperG3;



parameter instr_enc_reg_index_width = 4;
parameter instr_enc_reg_index_msb_pos 
	= `WIDTH_TO_MSB_POS(instr_enc_reg_index_width);

parameter num_regs = 16;
parameter sp_reg_index = 15;
parameter lr_reg_index = 14;


// Size of requested data, be it for reading (all 4 sizes) or writing
// (8-bit, 16-bit, and 32-bit)
typedef enum bit [`CPU_ENUM_REQ_DATA_SIZE_MSB_POS:0]
{
	ReqDataSz8,
	ReqDataSz16,
	ReqDataSz32,
	ReqDataSz48

} ReqDataSize;

typedef struct packed
{
	bit [`CPU_ENUM_REQ_DATA_SIZE_MSB_POS:0] req_data_size;

	bit [`CPU_DATA_BUS_MAX_MSB_POS:0] data;
	bit [`CPU_ADDR_BUS_MSB_POS:0] addr;

	// Request anything, request a write specifically
	bit req_rdwr, req_write;
} StrcOutCpu;

typedef struct packed
{
	// General purpose registers
	bit [`CPU_WORD_MSB_POS:0] gpr[0:`WIDTH_TO_MSB_POS(num_regs)];

	// Program Counter
	bit [`CPU_WORD_MSB_POS:0] pc;

	// Interrupt Return Address
	bit [`CPU_WORD_MSB_POS:0] ira;

	bit [`CPU_ENUM_FLAGS_POS_MSB_POS:0] flags;

	// Whether interrupts are enabled
	bit ints_enabled;
} StrcCpuStorage;



typedef enum bit [`CPU_ENUM_STATE_MSB_POS:0]
{
	StInit,
	StDecodeInstr,
	StStartExecInstr,
	StFinishExecInstr,
	StWriteBack
} State;


// Just use address 0 as the interrupt jump location
parameter irq_jump_location = 32'h0000;


endpackage
