Three instruction encoding sizes:  16-bit, 32-bit, and 48-bit

The instruction group is a 3-bit field, the 3 most significant bits of the
first 16-bits.

Group 0 Instructions, for example, use 000 as their group identifier.

Group 0 Instructions
000o oooo aaaa bbbb
	
	o:  opcode
	a:  rA (destination register usually)
	b:  rB
	
	Instructions:
		// This instruction affects N, V, Z, and C flags.
		add rA, rB
		
		// Add with carry
		// This instruction affects N, V, Z, and C flags.
		adc rA, rB
		
		// This instruction affects N, V, Z, and C flags.
		sub rA, rB
		
		// Subtract with borrow (6502 style)
		// This instruction affects N, V, Z, and C flags.
		sbc rA, rB
		
		
		
		// temp = rA - rB
		// This instruction ONLY affects flags, and it affects all of them.
		cmp rA, rB
		
		// temp = rA & rB
		// This instruction affects the N and Z flags.
		tst rA, rB
		
		// rA &= rB
		// This instruction affects the N and Z flags.
		and rA, rB
		
		// rA |= rB
		// This instruction affects the N and Z flags.
		or rA, rB
		
		
		
		// rA ^= rB
		// This instruction affects the N and Z flags.
		xor rA, rB
		
		// Logical shift left
		rA <<= rB
		lsl rA, rB
		
		// Logical shift right
		lsr rA, rB
		
		// Arithmetic shift right
		asr rA, rB
		
		
		
		// Rotate rA left (NOT through carry) by rB bits, then store result in rA.
		rol rA, rB
		
		// Rotate rA right (NOT through carry) by rB bits, then store result in rA.
		ror rA, rB
		
		// Rotate rA left (THROUGH carry) by 1 bit, ignoring rB, then store result in rA.
		// This instruction only affects the C flag.
		rlc rA
		
		// Rotate rA right (THROUGH carry) by 1 bit, ignoring rB, then store result in rA.
		// This instruction only affects the C flag.
		rrc rA
		
		
		
		// rA = Zero extend of low 16 bits in rB
		zeh rA, rB
		
		// rA = Sign extend of low 16 bits in rB
		seh rA, rB
		
		// rA = Zero extend of low 8 bits in rB
		zeb rA, rB
		
		// rA = Sign extend of low 8 bits in rB
		seb rA, rB
		
		
		
		// Copy (rA = rB)
		cpy rA, rB
		
		// Copy Negated (rA = -rB)
		cpn rA, rB
		
		// Copy Complemented (rA = ~rB)
		cpc rA, rB
		
		// Copy pc to rA (this can be used for pc-relative loads
		// and stores)
		cpyfrpc rA
		
		
		
		
		// Set pc to destination address in (rA + rB).
		jumpx rA, rB
		
		// Subroutine call using (rA + rB) as destination address. 
		// The return address is stored in the link register (lr).
		callx rA, rB
		
		// ENable Interrupts
		eni
		
		// DIsable Interrupts
		dii
		
		
		
		// Set the PC to interrupt RETurn address and enable Interrupts
		reti
		
		// Set the PC to the Interrupt Return Address, but DON'T enable
		// interrupts
		jumpira
		
		// Swap the Interrupt Return Address and rA
		swpira rA
		
		// Copy the Interrupt Return Address to rA
		cpyira rA


Group 1 Instructions
001o oooo aaaa bbbb
	
	o:  opcode
	a:  rA
	b:  rB
	
	Instructions:
		// Load 32-bit value from address in rB into rA. 
		ldr rA, rB 
		
		// Load zero-extended 16-bit value from address in rB into rA. 
		// This zero-extends the value. 
		ldh rA, rB 
		
		// Load sign-extended 16-bit value from address in rB into rA. 
		// This sign-extends the value. 
		ldsh rA, rB 
		
		// Load zero-extended 8-bit value from address in rB into rA. 
		// This zero-extends the value. 
		ldb rA, rB 
		
		
		
		// Load sign-extended 8-bit value from address in rB into rA. 
		// This sign-extends the value. 
		ldsb rA, rB 
		
		// Store 32-bit value in rA to address in rB. 
		str rA, rB 
		
		// Store low 16 bits of rA to address in rB. 
		sth rA, rB 
		
		// Store low 8 bits of rA to address in rB. 
		stb rA, rB
		
		
		
		// Compare negated
		// temp = rA - (-rB)
		// This instruction ONLY affects flags, and it affects all of them.
		cmn rA, rB
		
		// Compare reversed
		// temp = rB - rA
		// This instruction ONLY affects flags, and it affects all of them.
		cmr rA, rB
		
		// Push registers rA and rb (as a pair) onto the 
		// stack (in that order)
		pushp rA, rB
		
		// Pop two 32-bit values off the stack, storing the first popped
		// value into rB and the second popped value into rA
		popp rA, rB
		
		
		
		// Add 4 to rB, then load from address in rB into
		// rA
		// LoaD Register, Add Before
		ldrab rA, rB
		
		// Store rA to address in rB, then subtract 4 from
		// rB
		// STore Register, Subtract After
		strsa rA, rB
		
		// Push flags as 8-bit value onto the stack (high 4 bits of pushed
		// value are set to zero before the push)
		pushf
		
		// Pop 8-bit value from the stack and store low 4 bits to flags
		popf
		
		
		
		// Clear rA, then CoPY FRom Flags to rA
		cpyfrf rA
		
		// Copy to flags from rA
		// This instruction affects N, V, Z, and C flags.
		cpytof rA
		
		// rA:rB = (64-bit zero-extend of rA) * (64-bit zero-extend of rB)
		// 
		// Note that rA will contain the high 32 bits of the 
		// unsigned 64-bit product
		// 
		// Note that rB will contain the low 32 bits of the 
		// unsigned 64-bit product
		// 
		umull rA, rB
		
		// rA:rB = (64-bit sign-extend of rA) * (64-bit sign-extend of rB)
		// 
		// Note that rA will contain the high 32 bits of the signed 
		// 64-bit product
		// 
		// Note that rB will contain the low 32 bits of the signed 
		// 64-bit product
		// 
		smull rA, rB
		
		
		
		// rA = rB + 1
		// This instruction affects N, V, Z, and C flags.
		inc rA, rB
		
		// rA = rB - 1
		// This instruction affects N, V, Z, and C flags.
		dec rA, rB
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		
		
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		
		
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.


Group 2 Instructions
010o oooo aaaa bbbb  iiii iiii iiii iiii
	
	o:  opcode
	a:  rA
	b:  rB
	i:  16-bit immediate value
	
	Instructions:
		// rA = rB + (sign-extended imm)
		// This instruction affects N, V, Z, and C flags.
		addsi rA, rB, imm
		
		// Compare rA to (zero-extended imm)
		// temp = rA - (zero-extended imm)
		// This instruction ONLY affects flags, and it affects all of them.
		cmpi rA, imm
		
		// Compare rA to negated (zero-extended imm)
		// temp = rA - (-(zero-extended imm))
		// This instruction ONLY affects flags, and it affects all of them.
		cmni rA, imm
		
		// Compare reversed with immediate value
		// temp = (zero-extended imm) - rA
		// This instruction ONLY affects flags, and it affects all of them.
		cmri rA, imm
		
		
		
		// temp = rA & (zero-extended imm)
		// This instruction affects the N and Z flags.
		tsti rA, imm
		
		// rA = rB & (zero-extended imm)
		// This instruction affects the N and Z flags.
		andi rA, rB, imm
		
		// rA = rB | (zero-extended imm)
		// This instruction affects the N and Z flags.
		ori rA, rB, imm
		
		// rA = rB ^ (zero-extended imm)
		// This instruction affects the N and Z flags.
		xori rA, rB, imm
		
		
		
		// Logical shift left, by (zero-extended imm) bits
		rA = rB << (zero-extended imm)
		lsli rA, rB, imm
		
		// Logical shift right, by (zero-extended imm) bits
		lsri rA, rB, imm
		
		// Arithmetic shift right, by (zero-extended imm) bits
		asri rA, rB, imm
		
		// Branch always, 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bra imm
		
		
		
		// Branch when Z == 0, 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bne imm
		
		// Branch when Z == 1, 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		beq imm
		
		// Branch when C == 0 [unsigned less than], 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bcc imm
		
		// Branch when C == 1 [unsigned greater than or equal], 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bcs imm
		
		
		
		// Branch when ( C == 0 or Z == 1 ) [unsigned less than or equal], 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bls imm
		
		// Branch when ( C == 1 and Z == 0 ) [unsigned greater than], 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bhi imm
		
		// Branch when N == 0, 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bpl imm
		
		// Branch when N == 1, 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bmi imm
		
		
		
		// Branch when V == 0, 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bvc imm
		
		// Branch when V == 1, 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bvs imm
		
		// Branch when N == V [signed greater than or equal], 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bge imm
		
		// Branch when N != V [signed less than], 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		blt imm
		
		
		
		// Branch when ( N == V and Z == 0 ) [signed greater than], 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bgt imm
		
		// Branch when ( N != V or Z == 1 ) [signed less than or equal], 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		ble imm
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		
		
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		
		
		
		// Pseudo instruction:
		//// rA = rB - (sign-extended imm)
		//// This instruction affects N, V, Z, and C flags.
		//subsi rA, rB, imm


Group 3 Instructions
011o oooo aaaa bbbb  cccc iiii iiii iiii
	
	o:  opcode
	a:  rA
	b:  rB
	c:  rc
	i:  12-bit immediate value
	
	Instructions:
		// Load 32-bit value from address (rB + rC + (sign-extended imm)) into rA. 
		ldrxx rA, rB, rC, imm 
		
		// Load zero-extended 16-bit value from address (rB + rC + (sign-extended imm)) into rA. 
		// This zero-extends the value. 
		ldhxx rA, rB, rC, imm 
		
		// Load sign-extended 16-bit value from address (rB + rC + (sign-extended imm)) into rA. 
		// This sign-extends the value. 
		ldshxx rA, rB, rC, imm 
		
		// Load zero-extended 8-bit value from address (rB + rC + (sign-extended imm)) into rA. 
		// This zero-extends the value. 
		ldbxx rA, rB, rC, imm 
		
		
		
		// Load sign-extended 8-bit value from address (rB + rC + (sign-extended imm)) into rA. 
		// This sign-extends the value. 
		ldsbxx rA, rB, rC, imm 
		
		// Store 32-bit value in rA to address (rB + rC + (sign-extended imm)). 
		strxx rA, rB, rC, imm 
		
		// Store low 16 bits of rA to address (rB + rC + (sign-extended imm)). 
		sthxx rA, rB, rC, imm 
		
		// Store low 8 bits of rA to address (rB + rC + (sign-extended imm)). 
		stbxx rA, rB, rC, imm
		
		
		// rA = rB + rC
		addt rA, rB, rC
		
		// rA = rB - rC
		subt rA, rB, rC
		
		// rA = rC - rB
		rsbt rA, rB, rC
		
		// rA = rB * rC
		mult rA, rB, rC
		
		
		
		
		// rA = rB & rC
		// This instruction affects the N and Z flags.
		andt rA, rB, rC
		
		// rA = rB | rC
		// This instruction affects the N and Z flags.
		ort rA, rB, rC
		
		// rA = rB ^ rC
		// This instruction affects the N and Z flags.
		xort rA, rB, rC
		
		// Logical shift left
		// rA = rB << rC
		lslt rA, rB, rC
		
		
		
		// Logical shift right
		lsrt rA, rB, rC
		
		// Arithmetic shift right
		asrt rA, rB, rC
		
		// Rotate rB left by rC bits, then store result in rA.
		rolt rA, rB, rC
		
		// Rotate rB right by rC bits, then store result in rA.
		rort rA, rB, rC
		
		
		
		// Fused multiply-add
		// rA = rA + (rB + rC)
		fma rA, rB, rC
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		
		
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		
		
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.


Group 4 Instructions
100o oooo aaaa bbbb  iiii iiii iiii iiii  iiii iiii iiii iiii
	
	o:  opcode
	a:  rA
	b:  rB
	i:  32-bit immediate value
	
	Instructions:
		// Load 32-bit value from address (absolute_addr + rB) into rA. 
		ldrax rA, rB, absolute_addr 
		
		// Load zero-extended 16-bit value from address (absolute_addr + rB) into rA. 
		// This zero-extends the value. 
		ldhax rA, rB, absolute_addr 
		
		// Load sign-extended 16-bit value from address (absolute_addr + rB) into rA. 
		// This sign-extends the value. 
		ldshax rA, rB, absolute_addr 
		
		// Load zero-extended 8-bit value from address (absolute_addr + rB) into rA. 
		// This zero-extends the value. 
		ldbax rA, rB, absolute_addr 
		
		
		
		// Load sign-extended 8-bit value from address (absolute_addr + rB) into rA. 
		// This sign-extends the value. 
		ldsbax rA, rB, absolute_addr 
		
		// Store 32-bit value in rA to address (absolute_addr + rB). 
		strax rA, rB, absolute_addr 
		
		// Store low 16 bits of rA to address (absolute_addr + rB). 
		sthax rA, rB, absolute_addr 
		
		// Store low 8 bits of rA to address (absolute_addr + rB). 
		stbax rA, rB, absolute_addr
		
		
		
		// Set pc to destination address in (rA + rB + absolute_addr).
		jumpax rA, rB, absolute_addr
		
		// Subroutine call using (rA + rB + absolute_addr) as destination address. 
		// The return address is stored in the link register (lr).
		callax rA, rB, absolute_addr
		
		// rA = 32-bit immediate, rB = same 32-bit immediate, 
		// Can use r0 as one of the registers being set to ensure
		// that only one regular register gets set to the immediate value
		cpyi rA, rB, imm
		
		// Reserved for future expansion.
		
		
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		
		
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		
		
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		
		
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		
		
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
