Three instruction encoding sizes:  16-bit, 32-bit, and 48-bit

Instruction group is a 4-bit field, the 4 most significant bits of the
first 16-bits.

Group 1 Instructions, for example, use 0000 as their group identifier.

#define ONLY_FLAGS // This instruction ONLY affects flags.
#define NO_FLAGS // This instruction does not affect flags.
#define N_AND_Z // This instruction affects the N and Z flags.
#define NO_V  // This instruction affects N, Z, and C flags.
#define ALL_FLAGS // This instruction affects N, V, Z, and C flags.


Group 1 Instructions
0000 oooo aaaa bbbb

	o:	opcode
	a:	rA (destination register usually)
	b:	rB

	Instructions:
	
		ALL_FLAGS
		add rA, rB
		
		// Add with carry
		ALL_FLAGS
		adc rA, rB
		
		ALL_FLAGS
		sub rA, rB
		
		// Subtract with borrow (6502 style)
		ALL_FLAGS
		sbc rA, rB
		
		
		ONLY_FLAGS
		cmp rA, rB
		
		// Logical shift left
		NO_V
		lsl rA, rB
		
		// Logical shift right
		NO_V
		lsr rA, rB
		
		// Arithmetic shift right
		NO_V
		asr rA, rB


		N_AND_Z
		and rA, rB
		
		N_AND_Z
		or rA, rB
		
		N_AND_Z
		xor rA, rB
		
		// Copy Negated (rA = -rB)
		N_AND_Z
		cpn rA, rB
		
		
		
		// Copy Complemented (rA = ~rB)
		N_AND_Z
		cpc rA, rB
		
		// Copy (rA = rB)
		N_AND_Z
		cpy rA, rB
		
		// Swap (temp = rA; rA = rB; rB = temp)
		// Not sure how useful this is, but you can swap with the stack pointer
		// or with the link register
		NO_FLAGS
		swp rA, rB
		
		// rA *= rB
		N_AND_Z
		mul rA, rB

Group 2 Instructions
0001 oooo aaaa bbbb

	o:	opcode
	a:	rA
	b:	rB
	
	Instructions:
		
		// Load 32-bit value from address in rB into rA
		NO_FLAGS
		ldr rA, rB
		
		// Load unsigned 16-bit value from address in rB into rA.  This zero
		// extends the value.
		ldh rA, rB
		
		// Load signed 16-bit value from address in rB into rA.  This sign
		// extends the value.
		ldsh rA, rB
		
		// Load unsigned 8-bit value from address in rB into rA.	This zero
		// extends the value.
		ldb rA, rB
		
		
		
		// Load signed 8-bit value from address in rB into rA.	This sign
		// extends the value.
		ldsb rA, rB
		
		// Store 32-bit value in rA to address in rB
		str rA, rB
		
		// Store low 16 bits of rA to address in rB
		sth rA, rB
		
		// Store low 8 bits of rA to address in rB
		stb rA, rB


Group 3 Instructions
0010 oooo aaaa bbbb iiii iiii iiii iiii
	
	o:	opcode
	a:	rA
