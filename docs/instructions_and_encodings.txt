Three instruction encoding sizes:  16-bit, 32-bit, and 48-bit

The instruction group is a 2-bit field, the 2 most significant bits of the
first 16-bits.

Group 0 Instructions, for example, use 000 as their group identifier.

To specify that an instruction is permitted to affect flags, append ".f"
(without quotes) to the end of the instruction name.  
Example:  "addt" becomes "addt.f"

Group 0 Instructions
00fo oooo aaaa bbbb
	
	f:  1 if can affect flags (and instruction type supports it), 0 if 
	flags unchanged. 
	
	o:  opcode
	a:  rA (destination register usually)
	b:  rB
	
	Instructions:
		// rA = rA + rB 
		// This instruction can affect N, V, Z, and C flags. 
		add rA, rB 
		
		// rA = rA + rB + carry_flag 
		// Add with carry 
		// This instruction can affect N, V, Z, and C flags. 
		adc rA, rB 
		
		// rA = rA - rB 
		// This instruction can affect N, V, Z, and C flags. 
		sub rA, rB 
		
		// rA = rA + (~rB) + carry_flag 
		// Subtract with borrow (6502 style) 
		// This instruction can affect N, V, Z, and C flags. 
		sbc rA, rB 
		
		
		
		// rA = rB - rA 
		// This instruction can affect N, V, Z, and C flags. 
		rsb rA, rB 
		
		// rA = rA * rB 
		mul rA, rB 
		
		// rA = rA & rB 
		// This instruction can affect the N and Z flags. 
		and rA, rB 
		
		// rA = rA | rB 
		// This instruction can affect the N and Z flags. 
		or rA, rB 
		
		
		
		// rA = rA ^ rB 
		// This instruction can affect the N and Z flags. 
		xor rA, rB 
		
		// Logical shift left 
		// rA = rA << rB 
		lsl rA, rB 
		
		// Logical shift right 
		lsr rA, rB 
		
		// Arithmetic shift right 
		asr rA, rB 
		
		
		
		// Rotate rB left by rB bits, then store result in rA. 
		rol rA, rB 
		
		// Rotate rB right by rB bits, then store result in rA. 
		ror rA, rB
		
		// Rotate rB left (THROUGH carry) by 1 bit, then store result in rA.
		// This instruction can only affect the C flag.
		rlc rA, rB
		
		// Rotate rB right (THROUGH carry) by 1 bit, then store result in rA.
		// This instruction can only affect the C flag.
		rrc rA, rB
		
		
		
		// rA = Sign extend of low 16 bits in rB
		// Note that the high 16 bits of rB are ignored
		seh rA, rB
		
		// rA = Sign extend of low 8 bits in rB
		seb rA, rB
		
		// Push registers rA and rb (as a pair) onto the 
		// stack (in that order)
		push rA, rB
		
		// Pop two 32-bit values off the stack, storing the first popped
		// value into rB and the second popped value into rA
		pop rA, rB
		
		
		
		// Push flags as 8-bit value onto the stack (high 4 bits of pushed
		// value are set to zero before the push)
		push flags
		
		// Pop 8-bit value from the stack and store low 4 bits to flags
		pop flags
		
		// Clear rA, then CoPY FRom Flags to rA
		cpy rA, flags
		
		// Copy to flags from rA
		// This instruction can affect N, V, Z, and C flags.
		cpy flags, rA
		
		
		
		// ENable Interrupts
		eni
		
		// DIsable Interrupts
		dii
		
		// Subroutine call using (rA + rB) as destination address. 
		// The return address is stored in the link register (lr).
		callx rA, rB
		
		// Copy pc to rA (this can be used for pc-relative loads
		// and stores)
		cpy rA, pc
		
		
		
		// Set the PC to interrupt RETurn address and enable Interrupts
		reti
		
		// Set the PC to the Interrupt Return Address, but DON'T enable
		// interrupts
		jump ira
		
		// Swap the Interrupt Return Address and rA
		swp rA, ira
		
		// Copy the Interrupt Return Address to rA
		cpy rA, ira
		
		
		// Pseudo instruction:
		//// Subroutine call using rB as destination address. 
		//// Encoded like this:  callx r0, rB
		//call rB
		
		


Group 1 Instructions
01fo oooo aaaa bbbb  iiii iiii iiii iiii
	
	f:  1 if can affect flags (and instruction type supports it), 0 if 
	flags unchanged. 
	
	o:  opcode
	a:  rA
	b:  rB
	i:  16-bit immediate value
	
	Instructions:
		// rA = rB + (zero-extended imm) 
		// This instruction can affect N, V, Z, and C flags. 
		addi rA, rB, imm 
		
		// rA = rB + (zero-extended imm) + carry_flag 
		// Add with carry 
		// This instruction can affect N, V, Z, and C flags. 
		adci rA, rB, imm 
		
		// rA = rB - (zero-extended imm) 
		// This instruction can affect N, V, Z, and C flags. 
		subi rA, rB, imm 
		
		// rA = rB + (~(zero-extended imm)) + carry_flag 
		// Subtract with borrow (6502 style) 
		// This instruction can affect N, V, Z, and C flags. 
		sbci rA, rB, imm 
		
		
		
		// rA = (zero-extended imm) - rB 
		// This instruction can affect N, V, Z, and C flags. 
		rsbi rA, rB, imm 
		
		// rA = rB * (zero-extended imm) 
		muli rA, rB, imm 
		
		// rA = rB & (zero-extended imm) 
		// This instruction can affect the N and Z flags. 
		andi rA, rB, imm 
		
		// rA = rB | (zero-extended imm) 
		// This instruction can affect the N and Z flags. 
		ori rA, rB, imm 
		
		
		
		// rA = rB ^ (zero-extended imm) 
		// This instruction can affect the N and Z flags. 
		xori rA, rB, imm 
		
		// Logical shift left 
		// rA = rB << (zero-extended imm) 
		lsli rA, rB, imm 
		
		// Logical shift right 
		lsri rA, rB, imm 
		
		// Arithmetic shift right 
		asri rA, rB, imm 
		
		
		
		// Rotate rB left by (zero-extended imm) bits, then store result in rA. 
		roli rA, rB, imm 
		
		// Rotate rB right by (zero-extended imm) bits, then store result in rA. 
		rori rA, rB, imm
		
		// Branch always, 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bra imm
		
		// Branch when Z == 0, 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bne imm
		
		
		
		// Branch when Z == 1, 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		beq imm
		
		// Branch when C == 0 [unsigned less than], 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bcc imm
		
		// Branch when C == 1 [unsigned greater than or equal], 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bcs imm
		
		// Branch when ( C == 0 or Z == 1 ) [unsigned less than or equal], 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bls imm
		
		
		
		// Branch when ( C == 1 and Z == 0 ) [unsigned greater than], 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bhi imm
		
		// Branch when N == 0, 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bpl imm
		
		// Branch when N == 1, 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bmi imm
		
		// Branch when V == 0, 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bvc imm
		
		
		
		// Branch when V == 1, 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bvs imm
		
		// Branch when N == V [signed greater than or equal], 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bge imm
		
		// Branch when N != V [signed less than], 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		blt imm
		
		// Branch when ( N == V and Z == 0 ) [signed greater than], 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		bgt imm
		
		
		
		// Branch when ( N != V or Z == 1 ) [signed less than or equal], 
		// to ( (pc when instruction starts) 
		// + (sign-extended 16-bit immediate value) )
		ble imm
		
		// rA = rB & (sign-extended imm)
		// This instruction can affect the N and Z flags.
		andsi rA, rB, imm
		
		// rA = rB | (sign-extended imm)
		// This instruction can affect the N and Z flags.
		orsi rA, rB, imm
		
		// rA = rB ^ (sign-extended imm)
		// This instruction can affect the N and Z flags.
		xorsi rA, rB, imm
		
		
		
		// Pseudo instruction:
		//// Compare rB to (zero-extended imm)
		//// Encoded like this:  subi r0, rB, imm
		//// temp = rB - (zero-extended imm)
		//// This instruction can affect N, V, Z, and C flags.
		//cmpi rB, imm
		
		// Pseudo instruction:
		//// Compare rB to negated (zero-extended imm)
		//// Encoded like this:  addi r0, rB, imm
		//// temp = rB - (-(zero-extended imm))
		//// This instruction can affect N, V, Z, and C flags.
		//cmni rB, imm
		
		// Pseudo instruction:
		//// Copy Negated
		//// Encoded like this:  rsbi rA, rB, 0
		//// rA = -rB
		//cpn rA, rB
		
		// Pseudo instruction:
		//// Compare reversed with immediate value
		//// Encoded like this:  rsbi r0, rB, imm
		//// temp = (zero-extended imm) - rB
		//// This instruction can affect N, V, Z, and C flags.
		//cmri rB, imm
		
		
		
		// Pseudo instruction:
		//// temp = rB & (zero-extended imm)
		//// Encoded like this:  andi r0, rB, imm
		//// This instruction can affect the N and Z flags.
		//tsti rB, imm


Group 2 Instructions
10fo oooo aaaa bbbb  cccc iiii iiii iiii
	
	f:  1 if can affect flags (and instruction type supports it), 0 if 
	flags unchanged. 
	
	o:  opcode
	a:  rA
	b:  rB
	c:  rc
	i:  12-bit immediate value
	
	Instructions:
		// Load 32-bit value from address (rB + rC + (sign-extended imm)) into rA. 
		ldr rA, rB, rC, imm 
		
		// Load zero-extended 16-bit value from address (rB + rC + (sign-extended imm)) into rA. 
		// This zero-extends the value. 
		ldh rA, rB, rC, imm 
		
		// Load sign-extended 16-bit value from address (rB + rC + (sign-extended imm)) into rA. 
		// This sign-extends the value. 
		ldsh rA, rB, rC, imm 
		
		// Load zero-extended 8-bit value from address (rB + rC + (sign-extended imm)) into rA. 
		// This zero-extends the value. 
		ldb rA, rB, rC, imm 
		
		
		
		// Load sign-extended 8-bit value from address (rB + rC + (sign-extended imm)) into rA. 
		// This sign-extends the value. 
		ldsb rA, rB, rC, imm 
		
		// Store 32-bit value in rA to address (rB + rC + (sign-extended imm)). 
		str rA, rB, rC, imm 
		
		// Store low 16 bits of rA to address (rB + rC + (sign-extended imm)). 
		sth rA, rB, rC, imm 
		
		// Store low 8 bits of rA to address (rB + rC + (sign-extended imm)). 
		stb rA, rB, rC, imm
		
		
		// rA = rB + rC 
		// This instruction can affect N, V, Z, and C flags. 
		addt rA, rB, rC 
		
		// rA = rB + rC + carry_flag 
		// Add with carry 
		// This instruction can affect N, V, Z, and C flags. 
		adct rA, rB, rC 
		
		// rA = rB - rC 
		// This instruction can affect N, V, Z, and C flags. 
		subt rA, rB, rC 
		
		// rA = rB + (~rC) + carry_flag 
		// Subtract with borrow (6502 style) 
		// This instruction can affect N, V, Z, and C flags. 
		sbct rA, rB, rC 
		
		
		
		// rA = rC - rB 
		// This instruction can affect N, V, Z, and C flags. 
		rsbt rA, rB, rC 
		
		// rA = rB * rC 
		mult rA, rB, rC 
		
		// rA = rB & rC 
		// This instruction can affect the N and Z flags. 
		andt rA, rB, rC 
		
		// rA = rB | rC 
		// This instruction can affect the N and Z flags. 
		ort rA, rB, rC 
		
		
		
		// rA = rB ^ rC 
		// This instruction can affect the N and Z flags. 
		xort rA, rB, rC 
		
		// Logical shift left 
		// rA = rB << rC 
		lslt rA, rB, rC 
		
		// Logical shift right 
		lsrt rA, rB, rC 
		
		// Arithmetic shift right 
		asrt rA, rB, rC 
		
		
		
		// Rotate rB left by rC bits, then store result in rA. 
		rolt rA, rB, rC 
		
		// Rotate rB right by rC bits, then store result in rA. 
		rort rA, rB, rC
		
		// Fused multiply-add
		// rA = rA + (rB * rC)
		fma rA, rB, rC
		
		// Copy rC to rA and to rB
		// If rA is the same register as rB, then the 
		// register will only be written once.
		cpyp rA, rB, rC
		
		
		
		// Set pc to destination address in (rA + rB).
		jumpx rA, rB
		
		// Add 4 to rB, then load from address in rB into
		// rA
		// LoaD Register, Add Before
		ldrab rA, rB
		
		// Store rA to address in rB, then subtract 4 from
		// rB
		// STore Register, Subtract After
		strsa rA, rB
		// Reserved for future expansion.
		
		
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		
		
		
		// Pseudo instruction:
		//// temp = rB - rC
		//// This instruction can affect N, V, Z, and C flags.
		//// Encoded like this:  subt.f r0, rB, rC
		//cmp rB, rC
		
		// Pseudo instruction:
		//// temp = rB - (-rC)
		//// This instruction can affect N, V, Z, and C flags.
		//// Encoded like this:  addt.f r0, rB, rC
		//cmn rB, rC
		
		// Pseudo instruction:
		//// temp = rC - rB
		//// This instruction can affect N, V, Z, and C flags.
		//// Encoded like this:  rsbt.f r0, rB, rC
		//cmr rB, rC
		
		
		// Pseudo instruction:
		//// temp = rB & rC
		//// Encoded like this:  andt.f r0, rB, rC
		//// This instruction can affect the N and Z flags.
		//tst rB, rC
		
		
		
		// Pseudo instruction:
		//// Copy
		//// rA = rC
		//// Encoded like this:  cpyp rA, rA, rC
		//cpy rA, rC
		
		
		// Pseudo instruction:
		//// Set pc to destination address in rB.
		//// Encoded like this:  jumpx r0, rB
		//jump rB
		


Group 3 Instructions
11fo oooo aaaa bbbb  iiii iiii iiii iiii  iiii iiii iiii iiii
	
	f:  1 if can affect flags (and instruction type supports it), 0 if 
	flags unchanged. 
	
	o:  opcode
	a:  rA
	b:  rB
	i:  32-bit immediate value
	
	Instructions:
		// Load 32-bit value from address (absolute_addr + rB) into rA. 
		ldra rA, rB, absolute_addr 
		
		// Load zero-extended 16-bit value from address (absolute_addr + rB) into rA. 
		// This zero-extends the value. 
		ldha rA, rB, absolute_addr 
		
		// Load sign-extended 16-bit value from address (absolute_addr + rB) into rA. 
		// This sign-extends the value. 
		ldsha rA, rB, absolute_addr 
		
		// Load zero-extended 8-bit value from address (absolute_addr + rB) into rA. 
		// This zero-extends the value. 
		ldba rA, rB, absolute_addr 
		
		
		
		// Load sign-extended 8-bit value from address (absolute_addr + rB) into rA. 
		// This sign-extends the value. 
		ldsba rA, rB, absolute_addr 
		
		// Store 32-bit value in rA to address (absolute_addr + rB). 
		stra rA, rB, absolute_addr 
		
		// Store low 16 bits of rA to address (absolute_addr + rB). 
		stha rA, rB, absolute_addr 
		
		// Store low 8 bits of rA to address (absolute_addr + rB). 
		stba rA, rB, absolute_addr
		
		
		
		// Set pc to destination address in (rA + rB + absolute_addr).
		jumpaxx rA, rB, absolute_addr
		
		// Subroutine call using (rA + rB + absolute_addr) as destination address. 
		// The return address is stored in the link register (lr).
		callaxx rA, rB, absolute_addr
		
		// rA = 32-bit immediate, rB = same 32-bit immediate
		// If rA is the same register as rB, then the 
		// register will only be written once.
		cpypi rA, rB, imm
		
		// Reserved for future expansion.
		
		
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		
		
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		
		
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		
		
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		
		
		
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		
		
		
		// Pseudo instruction:
		//// Set pc to destination address in (rA + absolute_addr).
		//// Encoded like this:  jumpaxx rA, r0, absolute_addr
		jumpax rA, absolute_addr
		
		// Pseudo instruction:
		//// Set pc to destination address in (absolute_addr).
		//// Encoded like this:  jumpaxx r0, r0, absolute_addr
		jumpa absolute_addr
		
		// Pseudo instruction:
		//// Subroutine call using (rA + absolute_addr) as destination address. 
		//// The return address is stored in the link register (lr).
		//// Encoded like this:  callaxx rA, r0, absolute_addr
		callax rA, absolute_addr
		
		// Pseudo instruction:
		//// Subroutine call using (absolute_addr) as destination address. 
		//// The return address is stored in the link register (lr).
		//// Encoded like this:  callaxx r0, r0, absolute_addr
		calla absolute_addr
		
		
		
		// Pseudo instruction:
		//// rA = 32-bit immediate
		//// Encoded like this:  cpypi rA, rA, imm
		//cpyi rA, imm
