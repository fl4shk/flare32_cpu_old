#define concat #1#2
-- Registers --
r0 is hardwired to the value zero.

There will be 32 general purpose registers, each 32-bit, though the stack
pointer is not as general purpose as r1-r30.




Link register (call instructions store the return address here):  lr, aka
r30.  This register does not have to be preserved by the callee, but note
that calling another function would overwrite this register!

Stack pointer:  sp, aka r31


The stack pointer is used for the explicit push/pop instructions, but those
only exist for -- Special Registers --

-- General Purpose Registers --
Function arguments go into
	r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15
Function argument registers can be used by the callee for whatever.  They
do not have to be preserved unless the callee wants them preserved (such as
if the callee also calls another function).  r1 also does not have to be
preserved by the callee, again unless the callee wants them preserved.

The stack pointer is used for the explicit push/pop instructions, but those
only exist for -- Special Registers --


32-bit return value:  r2
64-bit return value:  r2:r3 as a 64-bit pair with r2 as high 32 bits, r3 as
low 32 bits.


Scratch Registers (these must be preserved by the callee if used):  
	r16, r17, r18, r19, r20, r21, r22, r23, 
	r24, r25, r26, r27, r28, r29





-- Special Registers --
Special Reg 0:  Program counter:  pc (32-bit)
Special Reg 1:  Flags:  flags (32-bit)
Special Reg 2:  Interrupt Return Address:  ira (32-bit)
Special Reg 3:  Maskable Interrupt Enable:  ie (32-bit, but only lowest 1
				bit used)
Special Reg 4:  Long Multiplication Product High 32 bits:  mhi
Special Reg 5:  Long Multiplication Product Low 32 bits: mlo
Special Reg 6:  32-bit DivMod Quotient:  quot
Special Reg 7:  32-bit DivMod Remainder:  rem
Special Reg 8:  64-bit DivMod Quotient High 32 bits:  dhi
Special Reg 9:  64-bit DivMod Quotient Low 32 bits:  dlo
Special Reg 10:  64-bit DivMod Remainder High 32 bits: rhi
Special Reg 11:  64-bit DivMod Remainder Low 32 bits: rlo
Special Reg 12:  Reserved for future expansion
Special Reg 13:  Reserved for future expansion
Special Reg 14:  Reserved for future expansion
Special Reg 15:  Reserved for future expansion
Special Reg 16:  Reserved for future expansion
Special Reg 17:  Reserved for future expansion
Special Reg 18:  Reserved for future expansion
Special Reg 19:  Reserved for future expansion
Special Reg 20:  Reserved for future expansion
Special Reg 21:  Reserved for future expansion
Special Reg 22:  Reserved for future expansion
Special Reg 23:  Reserved for future expansion
Special Reg 24:  Reserved for future expansion
Special Reg 25:  Reserved for future expansion
Special Reg 26:  Reserved for future expansion
Special Reg 27:  Reserved for future expansion
Special Reg 28:  Reserved for future expansion
Special Reg 29:  Reserved for future expansion
Special Reg 30:  Reserved for future expansion
Special Reg 31:  Reserved for future expansion


#if 0
PC-relative operations are possible via "cpy rA, pc"
However, PC-relative operations are typically unnecessary due to the
existence of 32-bit immediate values.  Position independent code is the main
reason to use cpy rA, pc.
#endif
