Three instruction encoding sizes:  16-bit, 32-bit, and 48-bit

The instruction group is a 2-bit field, the 2 most significant bits of the
first 16-bits.

Group 0 Instructions, for example, use 00 as their group identifier.

To specify that an instruction is permitted to affect flags, append ".f"
(without quotes) to the end of the instruction name.  
Example:  "add" becomes "add.f"

Group 0 Instructions
00fo oooo aaaa bbbb

	f:  1 if can affect flags (and instruction type supports it), 0 if
	flags unchanged.

	o:  opcode
	a:  rA (destination register usually)
	b:  rB

	Instructions:
		// rA = rA + rB
		// This instruction can affect N, V, Z, and C flags.
		add rA, rB

		// rA = rA + rB + carry_flag
		// Add with carry
		// This instruction can affect N, V, Z, and C flags.
		adc rA, rB

		// rA = rA - rB
		// This instruction can affect N, V, Z, and C flags.
		sub rA, rB

		// rA = rA + (~rB) + carry_flag
		// Subtract with borrow (6502 style)
		// This instruction can affect N, V, Z, and C flags.
		sbc rA, rB



		// rA = rB - rA
		// This instruction can affect N, V, Z, and C flags.
		rsb rA, rB

		// rA = rA * rB
		mul rA, rB

		// rA = rA & rB
		// This instruction can affect the N and Z flags.
		and rA, rB

		// rA = rA | rB
		// This instruction can affect the N and Z flags.
		or rA, rB



		// rA = rA ^ rB
		// This instruction can affect the N and Z flags.
		xor rA, rB

		// Logical shift left
		// rA = rA << rB
		lsl rA, rB

		// Logical shift right
		lsr rA, rB

		// Arithmetic shift right
		asr rA, rB



		// Rotate rA left by rB bits, then store result in rA.
		rol rA, rB

		// Rotate rA right by rB bits, then store result in rA.
		ror rA, rB

		// Rotate rB left (THROUGH carry) by 1 bit, then store result in rA.
		// This instruction can only affect the C flag.
		rlc rA, rB

		// Rotate rB right (THROUGH carry) by 1 bit, then store result in rA.
		// This instruction can only affect the C flag.
		rrc rA, rB



		// rA = Sign extend of low 16 bits in rB
		// Note that the high 16 bits of rB are ignored
		seh rA, rB

		// rA = Sign extend of low 8 bits in rB
		seb rA, rB

		// Push registers rA and rb (as a pair) onto the 
		// stack (in that order)
		push rA, rB

		// Pop two 32-bit values off the stack, storing the first popped
		// value into rB and the second popped value into rA
		pop rA, rB



		// Push flags as 8-bit value onto the stack (high 4 bits of pushed
		// value are set to zero before the push)
		push flags

		// Pop 8-bit value from the stack and store low 4 bits to flags
		pop flags

		// Clear rA, then CoPY FRom Flags to rA
		cpy rA, flags

		// Copy to flags from rA
		// This instruction can affect N, V, Z, and C flags.
		cpy flags, rA



		// ENable Interrupts
		eni

		// DIsable Interrupts
		dii

		// Set the PC to interrupt RETurn address and enable Interrupts
		reti

		// Set the PC to the Interrupt Return Address, but DON'T enable
		// interrupts
		jump ira



		// Copy rA to the Interrupt Return Address
		cpy ira, rA

		// Copy the Interrupt Return Address to rA
		cpy rA, ira

		// Subroutine call using (rA + rB) as destination address. 
		// The return address is stored in the link register (lr).
		callx rA, rB

		// Copy pc to rA (this can be used for pc-relative loads
		// and stores)
		cpy rA, pc


		// Pseudo instruction:
		//// Subroutine call using rB as destination address. 
		//// Encoded like this:  callx r0, rB
		//call rB


Group 1 Instructions
01fo oooo aaaa bbbb  iiii iiii iiii iiii

	f:  1 if can affect flags (and instruction type supports it), 0 if
	flags unchanged.

	o:  opcode
	a:  rA
	b:  rB
	i:  16-bit immediate value

	Instructions:
		// rA = rB + (zero-extended imm)
		// This instruction can affect N, V, Z, and C flags.
		addi rA, rB, imm

		// rA = rB + (zero-extended imm) + carry_flag
		// Add with carry
		// This instruction can affect N, V, Z, and C flags.
		adci rA, rB, imm

		// rA = rB - (zero-extended imm)
		// This instruction can affect N, V, Z, and C flags.
		subi rA, rB, imm

		// rA = rB + (~(zero-extended imm)) + carry_flag
		// Subtract with borrow (6502 style)
		// This instruction can affect N, V, Z, and C flags.
		sbci rA, rB, imm



		// rA = (zero-extended imm) - rB
		// This instruction can affect N, V, Z, and C flags.
		rsbi rA, rB, imm

		// rA = rB * (zero-extended imm)
		muli rA, rB, imm

		// rA = rB & (zero-extended imm)
		// This instruction can affect the N and Z flags.
		andi rA, rB, imm

		// rA = rB | (zero-extended imm)
		// This instruction can affect the N and Z flags.
		ori rA, rB, imm



		// rA = rB ^ (zero-extended imm)
		// This instruction can affect the N and Z flags.
		xori rA, rB, imm

		// Logical shift left
		// rA = rB << (zero-extended imm)
		lsli rA, rB, imm

		// Logical shift right
		lsri rA, rB, imm

		// Arithmetic shift right
		asri rA, rB, imm



		// Rotate  left by (zero-extended imm) bits, then store result in rA.
		roli rA, rB, imm

		// Rotate  right by (zero-extended imm) bits, then store result in rA.
		rori rA, rB, imm

		// Branch always, 
		// to ((pc when instruction starts)
		// + (sign-extended 16-bit immediate value))
		bra imm

		// Branch never (effectively a NOP),
		// to ((pc when instruction starts)
		// + (sign-extended 16-bit immediate value))
		bnv imm



		// Branch when Z == 0, 
		// to ((pc when instruction starts)
		// + (sign-extended 16-bit immediate value))
		bne imm

		// Branch when Z == 1, 
		// to ((pc when instruction starts)
		// + (sign-extended 16-bit immediate value))
		beq imm

		// Branch when C == 0 [unsigned less than], 
		// to ((pc when instruction starts)
		// + (sign-extended 16-bit immediate value))
		bcc imm

		// Branch when C == 1 [unsigned greater than or equal], 
		// to ((pc when instruction starts)
		// + (sign-extended 16-bit immediate value))
		bcs imm



		// Branch when (C == 0 or Z == 1) [unsigned less than or equal], 
		// to ((pc when instruction starts)
		// + (sign-extended 16-bit immediate value))
		bls imm

		// Branch when (C == 1 and Z == 0) [unsigned greater than], 
		// to ((pc when instruction starts)
		// + (sign-extended 16-bit immediate value))
		bhi imm

		// Branch when N == 0, 
		// to ((pc when instruction starts)
		// + (sign-extended 16-bit immediate value))
		bpl imm

		// Branch when N == 1, 
		// to ((pc when instruction starts)
		// + (sign-extended 16-bit immediate value))
		bmi imm



		// Branch when V == 0, 
		// to ((pc when instruction starts)
		// + (sign-extended 16-bit immediate value))
		bvc imm

		// Branch when V == 1, 
		// to ((pc when instruction starts)
		// + (sign-extended 16-bit immediate value))
		bvs imm

		// Branch when N == V [signed greater than or equal], 
		// to ((pc when instruction starts)
		// + (sign-extended 16-bit immediate value))
		bge imm

		// Branch when N != V [signed less than], 
		// to ((pc when instruction starts)
		// + (sign-extended 16-bit immediate value))
		blt imm



		// Branch when (N == V and Z == 0) [signed greater than], 
		// to ((pc when instruction starts)
		// + (sign-extended 16-bit immediate value))
		bgt imm

		// Branch when (N != V or Z == 1) [signed less than or equal], 
		// to ((pc when instruction starts)
		// + (sign-extended 16-bit immediate value))
		ble imm

		// rA = rB ^ (sign-extended imm)
		// This instruction can affect the N and Z flags.
		xorsi rA, rB, imm

		// Reserved for future expansion.



		// Pseudo instruction:
		//// Compare rB to (zero-extended imm)
		//// temp = rB - (zero-extended imm)
		//// Encoded like this:  subi.f r0, rB, imm
		//// This instruction can affect N, V, Z, and C flags.
		//cmpi rB, imm

		// Pseudo instruction:
		//// Compare rB to negated (zero-extended imm)
		//// temp = rB - (-(zero-extended imm))
		//// Encoded like this:  addi.f r0, rB, imm
		//// This instruction can affect N, V, Z, and C flags.
		//cmni rB, imm

		// Pseudo instruction:
		//// Compare reversed with immediate value
		//// temp = (zero-extended imm) - rB
		//// Encoded like this:  rsbi.f r0, rB, imm
		//// This instruction can affect N, V, Z, and C flags.
		//cmri rB, imm

		// Pseudo instruction:
		//// Copy Negated
		//// rA = -rB
		//// Encoded like this:  rsbi rA, rB, 0
		//cpn rA, rB

		// Pseudo instruction:
		//// Copy Complemented
		//// rA = ~rB
		//// Encoded like this:  xorsi rA, rB, -1
		//cpc rA, rB




		// Pseudo instruction:
		//// temp = rB & (zero-extended imm)
		//// Encoded like this:  andi r0, rB, imm
		//// This instruction can affect the N and Z flags.
		//tsti rB, imm


Group 2 Instructions
10fo oooo aaaa bbbb  cccc iiii iiii iiii

	f:  1 if can affect flags (and instruction type supports it), 0 if
	flags unchanged.

	o:  opcode
	a:  rA
	b:  rB
	c:  rc
	i:  12-bit immediate value

	Instructions:
		// Load 32-bit value from address (rB + rC + (sign-extended imm)) into rA.
		ldr rA, [rB, rC, imm]

		// Load zero-extended 16-bit value from address (rB + rC + (sign-extended imm)) into rA.
		// This zero-extends the value.
		ldh rA, [rB, rC, imm]

		// Load sign-extended 16-bit value from address (rB + rC + (sign-extended imm)) into rA.
		// This sign-extends the value.
		ldsh rA, [rB, rC, imm]

		// Load zero-extended 8-bit value from address (rB + rC + (sign-extended imm)) into rA.
		// This zero-extends the value.
		ldb rA, [rB, rC, imm]



		// Load sign-extended 8-bit value from address (rB + rC + (sign-extended imm)) into rA.
		// This sign-extends the value.
		ldsb rA, [rB, rC, imm]

		// Store 32-bit value in rA to address (rB + rC + (sign-extended imm)).
		str rA, [rB, rC, imm]

		// Store low 16 bits of rA to address (rB + rC + (sign-extended imm)).
		sth rA, [rB, rC, imm]

		// Store low 8 bits of rA to address (rB + rC + (sign-extended imm)).
		stb rA, [rB, rC, imm]


		// rA = rB + rC
		// This instruction can affect N, V, Z, and C flags.
		add rA, rB, rC

		// rA = rB + rC + carry_flag
		// Add with carry
		// This instruction can affect N, V, Z, and C flags.
		adc rA, rB, rC

		// rA = rB - rC
		// This instruction can affect N, V, Z, and C flags.
		sub rA, rB, rC

		// rA = rB + (~rC) + carry_flag
		// Subtract with borrow (6502 style)
		// This instruction can affect N, V, Z, and C flags.
		sbc rA, rB, rC



		// rA = rC - rB
		// This instruction can affect N, V, Z, and C flags.
		rsb rA, rB, rC

		// rA = rB * rC
		mul rA, rB, rC

		// rA = rB & rC
		// This instruction can affect the N and Z flags.
		and rA, rB, rC

		// rA = rB | rC
		// This instruction can affect the N and Z flags.
		or rA, rB, rC



		// rA = rB ^ rC
		// This instruction can affect the N and Z flags.
		xor rA, rB, rC

		// Logical shift left
		// rA = rB << rC
		lsl rA, rB, rC

		// Logical shift right
		lsr rA, rB, rC

		// Arithmetic shift right
		asr rA, rB, rC



		// Rotate rC left by rC bits, then store result in rA.
		rol rA, rB, rC

		// Rotate rC right by rC bits, then store result in rA.
		ror rA, rB, rC

		// Fused multiply-add
		// rA = rA + (rB * rC)
		fma rA, rB, rC

		// Copy rC to rA and to rB
		// If rA is the same register as rB, then the 
		// register will only be written once.
		cpyp rA, rB, rC



		// Set pc to destination address in (rA + rB).
		jumpx rA, rB

		// Add 4 to rB, then load from address in rB into
		// rA
		// LoaD Register, Add Before
		ldrpb rA, [rB]

		// Store rA to address in rB, then subtract 4 from
		// rB
		// STore Register, Subtract After
		strma rA, [rB]

		// Reserved for future expansion.



		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.



		// Pseudo instruction:
		//// Load 32-bit value from address rB into rA.
		//// Encoded like this:  ldr rA, [rB, r0, 0]
		//ldr rA, [rB]

		// Pseudo instruction:
		//// Load zero-extended 16-bit value from address rB into rA.
		//// This zero-extends the value.
		//// Encoded like this:  ldh rA, [rB, r0, 0]
		//ldh rA, [rB]

		// Pseudo instruction:
		//// Load sign-extended 16-bit value from address rB into rA.
		//// This sign-extends the value.
		//// Encoded like this:  ldsh rA, [rB, r0, 0]
		//ldsh rA, [rB]

		// Pseudo instruction:
		//// Load zero-extended 8-bit value from address rB into rA.
		//// This zero-extends the value.
		//// Encoded like this:  ldb rA, [rB, r0, 0]
		//ldb rA, [rB]



		// Pseudo instruction:
		//// Load sign-extended 8-bit value from address rB into rA.
		//// This sign-extends the value.
		//// Encoded like this:  ldsb rA, [rB, r0, 0]
		//ldsb rA, [rB]

		// Pseudo instruction:
		//// Store 32-bit value in rA to address rB.
		//// Encoded like this:  str rA, [rB, r0, 0]
		//str rA, [rB]

		// Pseudo instruction:
		//// Store low 16 bits of rA to address rB.
		//// Encoded like this:  sth rA, [rB, r0, 0]
		//sth rA, [rB]

		// Pseudo instruction:
		//// Store low 8 bits of rA to address rB.
		//// Encoded like this:  stb rA, [rB, r0, 0]
		//stb rA, [rB]


		// Pseudo instruction:
		//// Load 32-bit value from address (rB + rC) into rA.
		//// Encoded like this:  ldr rA, [rB, rC, 0]
		//ldrx rA, [rB, rC]

		// Pseudo instruction:
		//// Load zero-extended 16-bit value from address (rB + rC) into rA.
		//// This zero-extends the value.
		//// Encoded like this:  ldh rA, [rB, rC, 0]
		//ldhx rA, [rB, rC]

		// Pseudo instruction:
		//// Load sign-extended 16-bit value from address (rB + rC) into rA.
		//// This sign-extends the value.
		//// Encoded like this:  ldsh rA, [rB, rC, 0]
		//ldshx rA, [rB, rC]

		// Pseudo instruction:
		//// Load zero-extended 8-bit value from address (rB + rC) into rA.
		//// This zero-extends the value.
		//// Encoded like this:  ldb rA, [rB, rC, 0]
		//ldbx rA, [rB, rC]



		// Pseudo instruction:
		//// Load sign-extended 8-bit value from address (rB + rC) into rA.
		//// This sign-extends the value.
		//// Encoded like this:  ldsb rA, [rB, rC, 0]
		//ldsbx rA, [rB, rC]

		// Pseudo instruction:
		//// Store 32-bit value in rA to address (rB + rC).
		//// Encoded like this:  str rA, [rB, rC, 0]
		//strx rA, [rB, rC]

		// Pseudo instruction:
		//// Store low 16 bits of rA to address (rB + rC).
		//// Encoded like this:  sth rA, [rB, rC, 0]
		//sthx rA, [rB, rC]

		// Pseudo instruction:
		//// Store low 8 bits of rA to address (rB + rC).
		//// Encoded like this:  stb rA, [rB, rC, 0]
		//stbx rA, [rB, rC]



		// Pseudo instruction:
		//// Load 32-bit value from address (rB + (sign-extended imm)) into rA.
		//// Encoded like this:  ldr rA, [rB, r0, imm]
		//ldrxi rA, [rB, imm]

		// Pseudo instruction:
		//// Load zero-extended 16-bit value from address (rB + (sign-extended imm)) into rA.
		//// This zero-extends the value.
		//// Encoded like this:  ldh rA, [rB, r0, imm]
		//ldhxi rA, [rB, imm]

		// Pseudo instruction:
		//// Load sign-extended 16-bit value from address (rB + (sign-extended imm)) into rA.
		//// This sign-extends the value.
		//// Encoded like this:  ldsh rA, [rB, r0, imm]
		//ldshxi rA, [rB, imm]

		// Pseudo instruction:
		//// Load zero-extended 8-bit value from address (rB + (sign-extended imm)) into rA.
		//// This zero-extends the value.
		//// Encoded like this:  ldb rA, [rB, r0, imm]
		//ldbxi rA, [rB, imm]



		// Pseudo instruction:
		//// Load sign-extended 8-bit value from address (rB + (sign-extended imm)) into rA.
		//// This sign-extends the value.
		//// Encoded like this:  ldsb rA, [rB, r0, imm]
		//ldsbxi rA, [rB, imm]

		// Pseudo instruction:
		//// Store 32-bit value in rA to address (rB + (sign-extended imm)).
		//// Encoded like this:  str rA, [rB, r0, imm]
		//strxi rA, [rB, imm]

		// Pseudo instruction:
		//// Store low 16 bits of rA to address (rB + (sign-extended imm)).
		//// Encoded like this:  sth rA, [rB, r0, imm]
		//sthxi rA, [rB, imm]

		// Pseudo instruction:
		//// Store low 8 bits of rA to address (rB + (sign-extended imm)).
		//// Encoded like this:  stb rA, [rB, r0, imm]
		//stbxi rA, [rB, imm]



		// Pseudo instruction:
		//// temp = rB - rC
		//// This instruction can affect N, V, Z, and C flags.
		//// Encoded like this:  sub.f r0, rB, rC
		//cmp rB, rC

		// Pseudo instruction:
		//// temp = rB - (-rC)
		//// This instruction can affect N, V, Z, and C flags.
		//// Encoded like this:  add.f r0, rB, rC
		//cmn rB, rC

		// Pseudo instruction:
		//// temp = rC - rB
		//// This instruction can affect N, V, Z, and C flags.
		//// Encoded like this:  rsb.f r0, rB, rC
		//cmr rB, rC

		// Pseudo instruction:
		//// temp = rB & rC
		//// Encoded like this:  and.f r0, rB, rC
		//// This instruction can affect the N and Z flags.
		//tst rB, rC



		// Pseudo instruction:
		//// Copy
		//// rA = rC
		//// Encoded like this:  cpyp rA, rA, rC
		//cpy rA, rC

		// Pseudo instruction:
		//// Set pc to destination address in rB.
		//// Encoded like this:  jumpx r0, rB
		//jump rB

		// Pseudo instruction:
		//// Set pc to destination address in rB.
		//// Encoded like this:  jumpx r0, rB
		//cpy pc, rB

		// Pseudo instruction:
		//// Push register rA onto the stack
		//// Encoded like this:  strma rA, [sp]
		//push rA



		// Pseudo instruction:
		//// Pop 32-bit value off the stack into register rA
		//// Encoded like this:  ldrpb rA, [sp]
		//pop rA



Group 3 Instructions
11fo oooo aaaa bbbb  iiii iiii iiii iiii  iiii iiii iiii iiii

	f:  1 if can affect flags (and instruction type supports it), 0 if
	flags unchanged.

	o:  opcode
	a:  rA
	b:  rB
	i:  32-bit immediate value

	Instructions:
		// Load 32-bit value from address (absolute_addr + rB) into rA.
		ldra rA, [rB, absolute_addr]

		// Load zero-extended 16-bit value from address (absolute_addr + rB) into rA.
		// This zero-extends the value.
		ldha rA, [rB, absolute_addr]

		// Load sign-extended 16-bit value from address (absolute_addr + rB) into rA.
		// This sign-extends the value.
		ldsha rA, [rB, absolute_addr]

		// Load zero-extended 8-bit value from address (absolute_addr + rB) into rA.
		// This zero-extends the value.
		ldba rA, [rB, absolute_addr]



		// Load sign-extended 8-bit value from address (absolute_addr + rB) into rA.
		// This sign-extends the value.
		ldsba rA, [rB, absolute_addr]

		// Store 32-bit value in rA to address (absolute_addr + rB).
		stra rA, [rB, absolute_addr]

		// Store low 16 bits of rA to address (absolute_addr + rB).
		stha rA, [rB, absolute_addr]

		// Store low 8 bits of rA to address (absolute_addr + rB).
		stba rA, [rB, absolute_addr]



		// Set pc to destination address in (rA + rB + absolute_addr).
		jumpa rA, rB, absolute_addr

		// Subroutine call using (rA + rB + absolute_addr) as destination address. 
		// The return address is stored in the link register (lr).
		calla rA, rB, absolute_addr

		// rA = 32-bit immediate, rB = same 32-bit immediate
		// If rA is the same register as rB, then the 
		// register will only be written once.
		cpypi rA, rB, imm

		// Reserved for future expansion.



		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.



		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.



		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.



		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.



		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.



		// Pseudo instruction:
		//// Set pc to destination address in (rA + absolute_addr).
		//// Encoded like this:  jumpa rA, r0, absolute_addr
		//jumpa rA, absolute_addr

		// Pseudo instruction:
		//// Set pc to destination address in (absolute_addr).
		//// Encoded like this:  jumpa r0, r0, absolute_addr
		//jumpa absolute_addr

		// Pseudo instruction:
		//// Subroutine call using (rA + absolute_addr) as destination address. 
		//// The return address is stored in the link register (lr).
		//// Encoded like this:  calla rA, r0, absolute_addr
		//calla rA, absolute_addr

		// Pseudo instruction:
		//// Subroutine call using (absolute_addr) as destination address. 
		//// The return address is stored in the link register (lr).
		//// Encoded like this:  calla r0, r0, absolute_addr
		//calla absolute_addr



		// Pseudo instruction:
		//// rA = 32-bit immediate
		//// Encoded like this:  cpypi rA, rA, imm
		//cpyi rA, imm
