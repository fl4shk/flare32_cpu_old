Three instruction encoding sizes:  16-bit, 32-bit, and 48-bit

The instruction group is a 2-bit field, the 2 most significant bits of the
first 16-bits.

Group 0 Instructions, for example, use 00 as their group identifier.


Group 0 Instructions
00oo oooo aaaa bbbb

	o:  opcode
	a: rA (destination register usually)
	b: rB

	Instructions:
		// Load 32-bit value from address rB into rA.
		ldr rA, [rB]

		// Load zero-extended 16-bit value from address rB into rA.
		// This zero-extends the value.
		ldh rA, [rB]

		// Load sign-extended 16-bit value from address rB into rA.
		// This sign-extends the value.
		ldsh rA, [rB]

		// Load zero-extended 8-bit value from address rB into rA.
		// This zero-extends the value.
		ldb rA, [rB]



		// Load sign-extended 8-bit value from address rB into rA.
		// This sign-extends the value.
		ldsb rA, [rB]

		// Store 32-bit value in rA to address rB.
		str rA, [rB]

		// Store low 16 bits of rA to address rB.
		sth rA, [rB]

		// Store low 8 bits of rA to address rB.
		stb rA, [rB]



		// rA = rA + rB
		add rA, rB

		// rA = rA + rB + carry_flag
		// Add with carry
		adc rA, rB

		// rA = rA - rB
		sub rA, rB

		// rA = rA + (~rB) + carry_flag
		// Subtract with borrow (6502 style)
		sbc rA, rB



		// rA = rB - rA
		rsb rA, rB

		// rA = rA * rB
		mul rA, rB

		// rA = rA & rB
		and rA, rB

		// rA = rA | rB
		or rA, rB



		// rA = rA ^ rB
		xor rA, rB

		// Logical shift left
		// rA = rA << rB
		lsl rA, rB

		// Logical shift right
		lsr rA, rB

		// Arithmetic shift right
		asr rA, rB



		// Rotate rA left by rB bits, then store result in rA.
		rol rA, rB

		// Rotate rA right by rB bits, then store result in rA.
		ror rA, rB




		// rA = rA + rB
		// This instruction can affect N, V, Z, and C flags.
		add.f rA, rB

		// rA = rA + rB + carry_flag
		// Add with carry
		// This instruction can affect N, V, Z, and C flags.
		adc.f rA, rB

		// rA = rA - rB
		// This instruction can affect N, V, Z, and C flags.
		sub.f rA, rB

		// rA = rA + (~rB) + carry_flag
		// Subtract with borrow (6502 style)
		// This instruction can affect N, V, Z, and C flags.
		sbc.f rA, rB



		// rA = rB - rA
		// This instruction can affect N, V, Z, and C flags.
		rsb.f rA, rB

		// rA = rA * rB
		mul.f rA, rB

		// rA = rA & rB
		// This instruction can affect the N and Z flags.
		and.f rA, rB

		// rA = rA | rB
		// This instruction can affect the N and Z flags.
		or.f rA, rB



		// rA = rA ^ rB
		// This instruction can affect the N and Z flags.
		xor.f rA, rB

		// Logical shift left
		// rA = rA << rB
		lsl.f rA, rB

		// Logical shift right
		lsr.f rA, rB

		// Arithmetic shift right
		asr.f rA, rB



		// Rotate rA left by rB bits, then store result in rA.
		rol.f rA, rB

		// Rotate rA right by rB bits, then store result in rA.
		ror.f rA, rB



		// Rotate rB left (THROUGH carry) by 1 bit, then store result in rA.
		// This instruction can only affect the C flag.
		rlc rA, rB

		// Rotate rB right (THROUGH carry) by 1 bit, then store result in rA.
		// This instruction can only affect the C flag.
		rrc rA, rB

		// ENable Interrupts
		eni

		// DIsable Interrupts
		dii



		// Set the PC to interrupt RETurn address and enable Interrupts
		reti

		// Set the PC to the Interrupt Return Address, but DON'T enable
		// interrupts
		jump ira

		// Copy the Interrupt Return Address to rA
		cpy rA, ira

		// Copy rA to the Interrupt Return Address
		cpy ira, rA




		// Push flags as 8-bit value onto the stack (high 4 bits of pushed
		// value are set to zero before the push)
		push flags

		// Pop 8-bit value from the stack and store low 4 bits to flags
		pop flags

		// Clear rA, then CoPY FRom Flags to rA
		cpy rA, flags

		// Copy to flags from rA
		// This instruction can affect N, V, Z, and C flags.
		cpy flags, rA



		// Subroutine call using (rA + rB) as destination address. 
		// The return address is stored in the link register (lr).
		callx rA, rB

		// Set pc to destination address in (rA + rB).
		jumpx rA, rB

		// Copy (pc when instructions starts + 2) to rA (this can
		// be used for pc-relative loads and stores)
		cpy rA, pc

		// Copy
		// rA = rB
		cpy rA, rB



		// rA = Sign extend of low 16 bits in rB
		// Note that the high 16 bits of rB are ignored
		seh rA, rB

		// rA = Sign extend of low 8 bits in rB
		seb rA, rB

		// Reserved for future expansion.
		// Reserved for future expansion.



		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.

		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.



		// Pseudo instruction:
		//// Subroutine call using rB as destination address. 
		//// Encoded like this:  callx r0, rB
		//call rB

		// Pseudo instruction:
		//// Set pc to destination address in rB.
		//// Encoded like this:  jumpx r0, rB
		//jump rB

		// Pseudo instruction:
		//// Set pc to destination address in rB.
		//// Encoded like this:  jumpx r0, rB
		//cpy pc, rB


Group 1 Instructions
01oo oooo aaaa bbbb  iiii iiii iiii iiii

	o:  opcode
	a: rA
	b: rB
	i:  16-bit immediate value

	Instructions:
		// rA = rB + (zero-extended imm)
		addi rA, rB, imm

		// rA = rB + (zero-extended imm) + carry_flag
		// Add with carry
		adci rA, rB, imm

		// rA = rB - (zero-extended imm)
		subi rA, rB, imm

		// rA = rB + (~(zero-extended imm)) + carry_flag
		// Subtract with borrow (6502 style)
		sbci rA, rB, imm



		// rA = (zero-extended imm) - rB
		rsbi rA, rB, imm

		// rA = rB * (zero-extended imm)
		muli rA, rB, imm

		// rA = rB & (zero-extended imm)
		andi rA, rB, imm

		// rA = rB | (zero-extended imm)
		ori rA, rB, imm



		// rA = rB ^ (zero-extended imm)
		xori rA, rB, imm

		// Logical shift left
		// rA = rB << (zero-extended imm)
		lsli rA, rB, imm

		// Logical shift right
		lsri rA, rB, imm

		// Arithmetic shift right
		asri rA, rB, imm



		// Rotate  left by (zero-extended imm) bits, then store result in rA.
		roli rA, rB, imm

		// Rotate  right by (zero-extended imm) bits, then store result in rA.
		rori rA, rB, imm




		// rA = rB + (zero-extended imm)
		// This instruction can affect N, V, Z, and C flags.
		addi.f rA, rB, imm

		// rA = rB + (zero-extended imm) + carry_flag
		// Add with carry
		// This instruction can affect N, V, Z, and C flags.
		adci.f rA, rB, imm

		// rA = rB - (zero-extended imm)
		// This instruction can affect N, V, Z, and C flags.
		subi.f rA, rB, imm

		// rA = rB + (~(zero-extended imm)) + carry_flag
		// Subtract with borrow (6502 style)
		// This instruction can affect N, V, Z, and C flags.
		sbci.f rA, rB, imm



		// rA = (zero-extended imm) - rB
		// This instruction can affect N, V, Z, and C flags.
		rsbi.f rA, rB, imm

		// rA = rB * (zero-extended imm)
		muli.f rA, rB, imm

		// rA = rB & (zero-extended imm)
		// This instruction can affect the N and Z flags.
		andi.f rA, rB, imm

		// rA = rB | (zero-extended imm)
		// This instruction can affect the N and Z flags.
		ori.f rA, rB, imm



		// rA = rB ^ (zero-extended imm)
		// This instruction can affect the N and Z flags.
		xori.f rA, rB, imm

		// Logical shift left
		// rA = rB << (zero-extended imm)
		lsli.f rA, rB, imm

		// Logical shift right
		lsri.f rA, rB, imm

		// Arithmetic shift right
		asri.f rA, rB, imm



		// Rotate  left by (zero-extended imm) bits, then store result in rA.
		roli.f rA, rB, imm

		// Rotate  right by (zero-extended imm) bits, then store result in rA.
		rori.f rA, rB, imm




		// Branch always, 
		// to ((pc when instruction starts + 4)
		// + (sign-extended 16-bit immediate value))
		bra imm

		// Branch never (effectively a NOP),
		// to ((pc when instruction starts + 4)
		// + (sign-extended 16-bit immediate value))
		bnv imm

		// Branch when Z == 0, 
		// to ((pc when instruction starts + 4)
		// + (sign-extended 16-bit immediate value))
		bne imm

		// Branch when Z == 1, 
		// to ((pc when instruction starts + 4)
		// + (sign-extended 16-bit immediate value))
		beq imm



		// Branch when C == 0 [unsigned less than], 
		// to ((pc when instruction starts + 4)
		// + (sign-extended 16-bit immediate value))
		bcc imm

		// Branch when C == 1 [unsigned greater than or equal], 
		// to ((pc when instruction starts + 4)
		// + (sign-extended 16-bit immediate value))
		bcs imm

		// Branch when (C == 0 or Z == 1) [unsigned less than or equal], 
		// to ((pc when instruction starts + 4)
		// + (sign-extended 16-bit immediate value))
		bls imm

		// Branch when (C == 1 and Z == 0) [unsigned greater than], 
		// to ((pc when instruction starts + 4)
		// + (sign-extended 16-bit immediate value))
		bhi imm



		// Branch when N == 0, 
		// to ((pc when instruction starts + 4)
		// + (sign-extended 16-bit immediate value))
		bpl imm

		// Branch when N == 1, 
		// to ((pc when instruction starts + 4)
		// + (sign-extended 16-bit immediate value))
		bmi imm

		// Branch when V == 0, 
		// to ((pc when instruction starts + 4)
		// + (sign-extended 16-bit immediate value))
		bvc imm

		// Branch when V == 1, 
		// to ((pc when instruction starts + 4)
		// + (sign-extended 16-bit immediate value))
		bvs imm



		// Branch when N == V [signed greater than or equal], 
		// to ((pc when instruction starts + 4)
		// + (sign-extended 16-bit immediate value))
		bge imm

		// Branch when N != V [signed less than], 
		// to ((pc when instruction starts + 4)
		// + (sign-extended 16-bit immediate value))
		blt imm

		// Branch when (N == V and Z == 0) [signed greater than], 
		// to ((pc when instruction starts + 4)
		// + (sign-extended 16-bit immediate value))
		bgt imm

		// Branch when (N != V or Z == 1) [signed less than or equal], 
		// to ((pc when instruction starts + 4)
		// + (sign-extended 16-bit immediate value))
		ble imm



		// rA = rB ^ (sign-extended imm)
		// This instruction can affect the N and Z flags.
		xorsi rA, rB, imm

		// rA bits {31, 30, 29, ..., 18, 17, 16} = 16-bit unsigned immediate value
		lui rA, imm

		// Reserved for future expansion.
		// Reserved for future expansion.



		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.

		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.

		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.

		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.



		// Pseudo instruction:
		//// Compare rB to (zero-extended imm)
		//// temp = rB - (zero-extended imm)
		//// Encoded like this:  subi.f r0, rB, imm
		//// This instruction can affect N, V, Z, and C flags.
		//cmpi rB, imm

		// Pseudo instruction:
		//// Compare rB to negated (zero-extended imm)
		//// temp = rB - (-(zero-extended imm))
		//// Encoded like this:  addi.f r0, rB, imm
		//// This instruction can affect N, V, Z, and C flags.
		//cmni rB, imm

		// Pseudo instruction:
		//// Compare reversed with immediate value
		//// temp = (zero-extended imm) - rB
		//// Encoded like this:  rsbi.f r0, rB, imm
		//// This instruction can affect N, V, Z, and C flags.
		//cmri rB, imm

		// Pseudo instruction:
		//// Copy Negated
		//// rA = -rB
		//// Encoded like this:  rsbi rA, rB, 0
		//cpn rA, rB

		// Pseudo instruction:
		//// Copy Complemented
		//// rA = ~rB
		//// Encoded like this:  xorsi rA, rB, -1
		//cpc rA, rB




		// Pseudo instruction:
		//// temp = rB & (zero-extended imm)
		//// Encoded like this:  andi r0, rB, imm
		//// This instruction can affect the N and Z flags.
		//tsti rB, imm


Group 2 Instructions
Non Block Moves Version:  
	10oo oooo aaaa bbbb  cccc iiii iiii iiii

	o:  opcode
	a: rA
	b: rB
	c: rC
	i:  12-bit immediate value

Block Moves Version (stmdb, ldmia, stmia, push, pop):  
	10oo oooo aaaa bbbb  cccc dddd xxxx 00ii

	o:  opcode
	a: rA
	b: rB
	c: rC
	d: rD
	x: rX
	i:  2-bit immediate value

	Instructions:
		// Load 32-bit value from address (rB + rC + (sign-extended imm)) into rA.
		ldr rA, [rB, rC, imm]

		// Load zero-extended 16-bit value from address (rB + rC + (sign-extended imm)) into rA.
		// This zero-extends the value.
		ldh rA, [rB, rC, imm]

		// Load sign-extended 16-bit value from address (rB + rC + (sign-extended imm)) into rA.
		// This sign-extends the value.
		ldsh rA, [rB, rC, imm]

		// Load zero-extended 8-bit value from address (rB + rC + (sign-extended imm)) into rA.
		// This zero-extends the value.
		ldb rA, [rB, rC, imm]



		// Load sign-extended 8-bit value from address (rB + rC + (sign-extended imm)) into rA.
		// This sign-extends the value.
		ldsb rA, [rB, rC, imm]

		// Store 32-bit value in rA to address (rB + rC + (sign-extended imm)).
		str rA, [rB, rC, imm]

		// Store low 16 bits of rA to address (rB + rC + (sign-extended imm)).
		sth rA, [rB, rC, imm]

		// Store low 8 bits of rA to address (rB + rC + (sign-extended imm)).
		stb rA, [rB, rC, imm]


		// rA = rB + rC
		add rA, rB, rC

		// rA = rB + rC + carry_flag
		// Add with carry
		adc rA, rB, rC

		// rA = rB - rC
		sub rA, rB, rC

		// rA = rB + (~rC) + carry_flag
		// Subtract with borrow (6502 style)
		sbc rA, rB, rC



		// rA = rC - rB
		rsb rA, rB, rC

		// rA = rB * rC
		mul rA, rB, rC

		// rA = rB & rC
		and rA, rB, rC

		// rA = rB | rC
		or rA, rB, rC



		// rA = rB ^ rC
		xor rA, rB, rC

		// Logical shift left
		// rA = rB << rC
		lsl rA, rB, rC

		// Logical shift right
		lsr rA, rB, rC

		// Arithmetic shift right
		asr rA, rB, rC



		// Rotate rC left by rC bits, then store result in rA.
		rol rA, rB, rC

		// Rotate rC right by rC bits, then store result in rA.
		ror rA, rB, rC



		// rA = rB + rC
		// This instruction can affect N, V, Z, and C flags.
		add.f rA, rB, rC

		// rA = rB + rC + carry_flag
		// Add with carry
		// This instruction can affect N, V, Z, and C flags.
		adc.f rA, rB, rC

		// rA = rB - rC
		// This instruction can affect N, V, Z, and C flags.
		sub.f rA, rB, rC

		// rA = rB + (~rC) + carry_flag
		// Subtract with borrow (6502 style)
		// This instruction can affect N, V, Z, and C flags.
		sbc.f rA, rB, rC



		// rA = rC - rB
		// This instruction can affect N, V, Z, and C flags.
		rsb.f rA, rB, rC

		// rA = rB * rC
		mul.f rA, rB, rC

		// rA = rB & rC
		// This instruction can affect the N and Z flags.
		and.f rA, rB, rC

		// rA = rB | rC
		// This instruction can affect the N and Z flags.
		or.f rA, rB, rC



		// rA = rB ^ rC
		// This instruction can affect the N and Z flags.
		xor.f rA, rB, rC

		// Logical shift left
		// rA = rB << rC
		lsl.f rA, rB, rC

		// Logical shift right
		lsr.f rA, rB, rC

		// Arithmetic shift right
		asr.f rA, rB, rC



		// Rotate rC left by rC bits, then store result in rA.
		rol.f rA, rB, rC

		// Rotate rC right by rC bits, then store result in rA.
		ror.f rA, rB, rC




		// Fused multiply-add
		// rA = rA + (rB * rC)
		fma rA, rB, rC

		// Copy rC to rA and to rB
		// If rA is the same register as rB, then the 
		// register will only be written once.
		cpyp rA, rB, rC

		// STore Multiple, Decrement Before
		// Note that this instruction takes multiple forms
		// Form 0:
			// Encoding:  10f0 oooo aaaa 0000 0000 0000 xxxx 0000
			// Effect:  
				// rX -= 4;
				// [rX] = rA;
			Syntax:  stmdb rX, {rA}

		// Form 1:
			// Encoding:  10f0 oooo aaaa bbbb 0000 0000 xxxx 0001
			// Effect:  
				// rX -= 8;
				// [rX] = rA;
				// [rX + 4] = rB;
			Syntax:  stmdb rX, {rA, rB}

		// Form 2:
			// Encoding:  10f0 oooo aaaa bbbb cccc 0000 xxxx 0010
			// Effect:  
				// rX -= 12;
				// [rX] = rA;
				// [rX + 4] = rB;
				// [rX + 8] = rC;
			Syntax:  stmdb rX, {rA, rB, rC}

		// Form 3:
			// Encoding:  10f0 oooo aaaa bbbb cccc dddd xxxx 0011
			// Effect:  
				// rX -= 16;
				// [rX] = rA;
				// [rX + 4] = rB;
				// [rX + 8] = rC;
				// [rX + 12] = rD;
			Syntax:  stmdb rX, {rA, rB, rC, rD}


		// LoaD Multiple, Increment After
		// Note that this instruction takes multiple forms
		// Form 0:
			// Encoding:  10f0 oooo aaaa 0000 0000 0000 xxxx 0000
			// Effect:  
				// rA = [rX]; 
				// rX += 4;
			Syntax:  ldmia rX, {rA}

		// Form 1:
			// Encoding:  10f0 oooo aaaa bbbb 0000 0000 xxxx 0001
			// Effect:  
				// rA = [rX]; 
				// rB = [rX + 4];
				// rX += 8;
			Syntax:  ldmia rX, {rA, rB}

		// Form 2:
			// Encoding:  10f0 oooo aaaa bbbb cccc 0000 xxxx 0010
			// Effect:  
				// rA = [rX]; 
				// rB = [rX + 4];
				// rC = [rX + 8];
				// rX += 12;
			Syntax:  ldmia rX, {rA, rB, rC}

		// Form 3:
			// Encoding:  10f0 oooo aaaa bbbb cccc dddd xxxx 0011
			// Effect:  
				// rA = [rX]; 
				// rB = [rX + 4];
				// rC = [rX + 8];
				// rD = [rX + 12];
				// rX += 16;
			Syntax:  ldmia rX, {rA, rB, rC, rD}




		// STore Multiple, Increment After
		// Note that this instruction takes multiple forms
		// Form 0:
			// Encoding:  10f0 oooo aaaa 0000 0000 0000 xxxx 0000
			// Effect:  
				// [rX] = rA;
				// rX += 4;
			Syntax:  stmia rX, {rA}

		// Form 1:
			// Encoding:  10f0 oooo aaaa bbbb 0000 0000 xxxx 0001
			// Effect:  
				// [rX] = rA;
				// [rX + 4] = rB;
				// rX += 8;
			Syntax:  stmia rX, {rA, rB}

		// Form 2:
			// Encoding:  10f0 oooo aaaa bbbb cccc 0000 xxxx 0010
			// Effect:  
				// [rX] = rA;
				// [rX + 4] = rB;
				// [rX + 8] = rC;
				// rX += 12;
			Syntax:  stmia rX, {rA, rB, rC}

		// Form 3:
			// Encoding:  10f0 oooo aaaa bbbb cccc dddd xxxx 0011
			// Effect:  
				// [rX] = rA;
				// [rX + 4] = rB;
				// [rX + 8] = rC;
				// [rX + 12] = rD;
				// rX += 16;
			Syntax:  stmia rX, {rA, rB, rC, rD}


		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.

		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.



		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.

		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.

		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.

		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.



		// Pseudo instruction:
		//// Load 32-bit value from address (rB + rC) into rA.
		//// Encoded like this:  ldr rA, [rB, rC, 0]
		//ldrx rA, [rB, rC]

		// Pseudo instruction:
		//// Load zero-extended 16-bit value from address (rB + rC) into rA.
		//// This zero-extends the value.
		//// Encoded like this:  ldh rA, [rB, rC, 0]
		//ldhx rA, [rB, rC]

		// Pseudo instruction:
		//// Load sign-extended 16-bit value from address (rB + rC) into rA.
		//// This sign-extends the value.
		//// Encoded like this:  ldsh rA, [rB, rC, 0]
		//ldshx rA, [rB, rC]

		// Pseudo instruction:
		//// Load zero-extended 8-bit value from address (rB + rC) into rA.
		//// This zero-extends the value.
		//// Encoded like this:  ldb rA, [rB, rC, 0]
		//ldbx rA, [rB, rC]



		// Pseudo instruction:
		//// Load sign-extended 8-bit value from address (rB + rC) into rA.
		//// This sign-extends the value.
		//// Encoded like this:  ldsb rA, [rB, rC, 0]
		//ldsbx rA, [rB, rC]

		// Pseudo instruction:
		//// Store 32-bit value in rA to address (rB + rC).
		//// Encoded like this:  str rA, [rB, rC, 0]
		//strx rA, [rB, rC]

		// Pseudo instruction:
		//// Store low 16 bits of rA to address (rB + rC).
		//// Encoded like this:  sth rA, [rB, rC, 0]
		//sthx rA, [rB, rC]

		// Pseudo instruction:
		//// Store low 8 bits of rA to address (rB + rC).
		//// Encoded like this:  stb rA, [rB, rC, 0]
		//stbx rA, [rB, rC]



		// Pseudo instruction:
		//// Load 32-bit value from address (rB + (sign-extended imm)) into rA.
		//// Encoded like this:  ldr rA, [rB, r0, imm]
		//ldrxi rA, [rB, imm]

		// Pseudo instruction:
		//// Load zero-extended 16-bit value from address (rB + (sign-extended imm)) into rA.
		//// This zero-extends the value.
		//// Encoded like this:  ldh rA, [rB, r0, imm]
		//ldhxi rA, [rB, imm]

		// Pseudo instruction:
		//// Load sign-extended 16-bit value from address (rB + (sign-extended imm)) into rA.
		//// This sign-extends the value.
		//// Encoded like this:  ldsh rA, [rB, r0, imm]
		//ldshxi rA, [rB, imm]

		// Pseudo instruction:
		//// Load zero-extended 8-bit value from address (rB + (sign-extended imm)) into rA.
		//// This zero-extends the value.
		//// Encoded like this:  ldb rA, [rB, r0, imm]
		//ldbxi rA, [rB, imm]



		// Pseudo instruction:
		//// Load sign-extended 8-bit value from address (rB + (sign-extended imm)) into rA.
		//// This sign-extends the value.
		//// Encoded like this:  ldsb rA, [rB, r0, imm]
		//ldsbxi rA, [rB, imm]

		// Pseudo instruction:
		//// Store 32-bit value in rA to address (rB + (sign-extended imm)).
		//// Encoded like this:  str rA, [rB, r0, imm]
		//strxi rA, [rB, imm]

		// Pseudo instruction:
		//// Store low 16 bits of rA to address (rB + (sign-extended imm)).
		//// Encoded like this:  sth rA, [rB, r0, imm]
		//sthxi rA, [rB, imm]

		// Pseudo instruction:
		//// Store low 8 bits of rA to address (rB + (sign-extended imm)).
		//// Encoded like this:  stb rA, [rB, r0, imm]
		//stbxi rA, [rB, imm]



		// Pseudo instruction:
		//// temp = rB - rC
		//// This instruction can affect N, V, Z, and C flags.
		//// Encoded like this:  sub.f r0, rB, rC
		//cmp rB, rC

		// Pseudo instruction:
		//// temp = rB - (-rC)
		//// This instruction can affect N, V, Z, and C flags.
		//// Encoded like this:  add.f r0, rB, rC
		//cmn rB, rC

		// Pseudo instruction:
		//// temp = rC - rB
		//// This instruction can affect N, V, Z, and C flags.
		//// Encoded like this:  rsb.f r0, rB, rC
		//cmr rB, rC

		// Pseudo instruction:
		//// temp = rB & rC
		//// Encoded like this:  and.f r0, rB, rC
		//// This instruction can affect the N and Z flags.
		//tst rB, rC




		// Pseudo instruction:
		// Pop
		// Note that this instruction takes multiple forms
		// Form 0:
			// Encoding:  10f0 oooo aaaa 0000 0000 0000 1111 0000
			// Encoded like this:  ldmia sp, {rA}
			// Effect:  
				// rA = [sp];
				// sp += 4;
			// Syntax:  pop rA

		// Form 1:
			// Encoding:  10f0 oooo aaaa bbbb 0000 0000 1111 0001
			// Encoded like this:  ldmia sp, {rA, rB}
			// Effect:  
				// rA = [sp];
				// rB = [sp + 4];
				// sp += 8;
			// Syntax:  pop rA, rB

		// Form 2:
			// Encoding:  10f0 oooo aaaa bbbb cccc 0000 1111 0010
			// Encoded like this:  ldmia sp, {rA, rB, rC}
			// Effect:  
				// rA = [sp];
				// rB = [sp + 4];
				// rC = [sp + 8];
				// sp += 12;
			// Syntax:  pop rA, rB, rC

		// Form 3:
			// Encoding:  10f0 oooo aaaa bbbb cccc dddd 1111 0011
			// Encoded like this:  ldmia sp, {rA, rB, rC, rD}
			// Effect:  
				// rA = [sp];
				// rB = [sp + 4];
				// rC = [sp + 8];
				// rD = [sp + 12];
				// sp += 16;
			// Syntax:  pop rA, rB, rC, rD


		// Pseudo instruction:
		// Push
		// Note that this instruction takes multiple forms
		// Form 0:
			// Encoding:  10f0 oooo aaaa 0000 0000 0000 xxxx 0000
			// Encoded like this:  stmdb sp, {rA}
			// Effect:  
				// sp -= 4;
				// [sp] = rA;
			// Syntax:  push rA

		// Form 1:
			// Encoding:  10f0 oooo aaaa bbbb 0000 0000 xxxx 0001
			// Encoded like this:  stmdb sp, {rA, rB}
			// Effect:  
				// sp -= 8;
				// [sp] = rA;
				// [sp + 4] = rB;
			// Syntax:  push rA, rB

		// Form 2:
			// Encoding:  10f0 oooo aaaa bbbb cccc 0000 xxxx 0010
			// Encoded like this:  stmdb sp, {rA, rB, rC}
			// Effect:  
				// sp -= 12;
				// [sp] = rA;
				// [sp + 4] = rB;
				// [sp + 8] = rC;
			// Syntax:  push rA, rB, rC

		// Form 3:
			// Encoding:  10f0 oooo aaaa bbbb cccc dddd xxxx 0011
			// Effect:  
			// Encoded like this:  stmdb sp, {rA, rB, rC, rD}
				// sp -= 16;
				// [sp] = rA;
				// [sp + 4] = rB;
				// [sp + 8] = rC;
				// [sp + 12] = rD;
			// Syntax:  push rA, rB, rC, rD




Group 3 Instructions
Two Registers Version:  
	11oo oooo aaaa bbbb  iiii iiii iiii iiii  iiii iiii iiii iiii

	o:  opcode
	a: rA
	b: rB
	i:  32-bit immediate value

Block Moves Version (stmdb, ldmia, stmia, push, pop):  
	11oo oooo aaaa bbbb  cccc dddd eeee ffff  gggg hhhh xxxx 00ii

	o:  opcode
	a: rA
	b: rB
	c: rC
	d: rD
	e: rE
	f: rF
	g: rG
	h: rH
	x: rX
	i:  2-bit immediate value

32-bit by 32-bit -> 64-bit Multiply Version:
	11oo oooo aaaa bbbb  cccc dddd 0000 0000  0000 0000 0000 0000

	o:  opcode
	a: rA
	b: rB
	c: rC
	d: rD


64-bit by 64-bit -> 64-bit DivMod Version:
	11oo oooo aaaa bbbb  cccc dddd eeee ffff  gggg hhhh 0000 0000

	o:  opcode
	a: rA
	b: rB
	c: rC
	d: rD
	e: rE
	f: rF
	g: rG
	h: rH

32-bit by 32-bit -> 32-bit DivMod Version:
	11oo oooo aaaa bbbb  cccc dddd 0000 0000  0000 0000 0000 0000

	o:  opcode
	a: rA
	b: rB
	c: rC
	d: rD

64-bit bitshifted by 64-bit -> 64-bit Version:
	11oo oooo aaaa bbbb  cccc dddd eeee ffff  0000 0000 0000 0000

	o:  opcode
	a: rA
	b: rB
	c: rC
	d: rD
	e: rE
	f: rF


	Instructions:
		// Load 32-bit value from address (absolute_addr + rB) into rA.
		ldra rA, [rB, absolute_addr]

		// Load zero-extended 16-bit value from address (absolute_addr + rB) into rA.
		// This zero-extends the value.
		ldha rA, [rB, absolute_addr]

		// Load sign-extended 16-bit value from address (absolute_addr + rB) into rA.
		// This sign-extends the value.
		ldsha rA, [rB, absolute_addr]

		// Load zero-extended 8-bit value from address (absolute_addr + rB) into rA.
		// This zero-extends the value.
		ldba rA, [rB, absolute_addr]



		// Load sign-extended 8-bit value from address (absolute_addr + rB) into rA.
		// This sign-extends the value.
		ldsba rA, [rB, absolute_addr]

		// Store 32-bit value in rA to address (absolute_addr + rB).
		stra rA, [rB, absolute_addr]

		// Store low 16 bits of rA to address (absolute_addr + rB).
		stha rA, [rB, absolute_addr]

		// Store low 8 bits of rA to address (absolute_addr + rB).
		stba rA, [rB, absolute_addr]



		// Subroutine call using (rA + rB + absolute_addr) as destination address. 
		// The return address is stored in the link register (lr).
		calla rA, rB, absolute_addr

		// Set pc to destination address in (rA + rB + absolute_addr).
		jumpa rA, rB, absolute_addr

		// rA = 32-bit immediate, rB = same 32-bit immediate
		// If rA is the same register as rB, then the 
		// register will only be written once.
		cpypi rA, rB, imm

		// STore Multiple, Decrement Before
		// Note that this instruction takes multiple forms
		// Form 0:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee 0000  0000 0000 xxxx 0000
			// Effect:  
				// rX -= 20;
				// [rX] = rA;
				// [rX + 4] = rB;
				// [rX + 8] = rC;
				// [rX + 12] = rD;
				// [rX + 16] = rE;
			Syntax:  stmdb rX, {rA, rB, rC, rD, rE}

		// Form 1:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee ffff  0000 0000 xxxx 0001
			// Effect:  
				// rX -= 24;
				// [rX] = rA;
				// [rX + 4] = rB;
				// [rX + 8] = rC;
				// [rX + 12] = rD;
				// [rX + 16] = rE;
				// [rX + 20] = rF;
			Syntax:  stmdb rX, {rA, rB, rC, rD, rE, rF}

		// Form 2:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee ffff  gggg 0000 xxxx 0010
			// Effect:  
				// rX -= 28;
				// [rX] = rA;
				// [rX + 4] = rB;
				// [rX + 8] = rC;
				// [rX + 12] = rD;
				// [rX + 16] = rE;
				// [rX + 20] = rF;
				// [rX + 24] = rG;
			Syntax:  stmdb rX, {rA, rB, rC, rD, rE, rF, rG}

		// Form 3:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee ffff  gggg hhhh xxxx 0011
			// Effect:  
				// rX -= 32;
				// [rX] = rA;
				// [rX + 4] = rB;
				// [rX + 8] = rC;
				// [rX + 12] = rD;
				// [rX + 16] = rE;
				// [rX + 20] = rF;
				// [rX + 24] = rG;
				// [rX + 28] = rH;
			Syntax:  stmdb rX, {rA, rB, rC, rD, rE, rF, rG, rH}



		// LoaD Multiple, Increment After
		// Note that this instruction takes multiple forms
		// Form 0:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee 0000  0000 0000 xxxx 0000
			// Effect:  
				// rA = [rX]; 
				// rB = [rX + 4];
				// rC = [rX + 8];
				// rD = [rX + 12];
				// rE = [rX + 16];
				// rX += 20;
			Syntax:  ldmia rX, {rA, rB, rC, rD, rE}

		// Form 1:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee ffff  0000 0000 xxxx 0001
			// Effect:  
				// rA = [rX]; 
				// rB = [rX + 4];
				// rC = [rX + 8];
				// rD = [rX + 12];
				// rE = [rX + 16];
				// rF = [rX + 20];
				// rX += 24;
			Syntax:  ldmia rX, {rA, rB, rC, rD, rE, rF}

		// Form 2:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee ffff  gggg 0000 xxxx 0010
			// Effect:  
				// rA = [rX]; 
				// rB = [rX + 4];
				// rC = [rX + 8];
				// rD = [rX + 12];
				// rE = [rX + 16];
				// rF = [rX + 20];
				// rG = [rX + 24];
				// rX += 28;
			Syntax:  ldmia rX, {rA, rB, rC, rD, rE, rF, rG}

		// Form 3:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee ffff  gggg hhhh xxxx 0011
			// Effect:  
				// rA = [rX]; 
				// rB = [rX + 4];
				// rC = [rX + 8];
				// rD = [rX + 12];
				// rE = [rX + 16];
				// rF = [rX + 20];
				// rG = [rX + 24];
				// rH = [rX + 28];
				// rX += 32;
			Syntax:  ldmia rX, {rA, rB, rC, rD, rE, rF, rG, rH}


		// STore Multiple, Increment After
		// Note that this instruction takes multiple forms
		// Form 0:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee 0000  0000 0000 xxxx 0000
			// Effect:  
				// [rX] = rA;
				// [rX + 4] = rB;
				// [rX + 8] = rC;
				// [rX + 12] = rD;
				// [rX + 16] = rE;
				// rX += 20;
			Syntax:  stmia rX, {rA, rB, rC, rD, rE}

		// Form 1:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee ffff  0000 0000 xxxx 0001
			// Effect:  
				// [rX] = rA;
				// [rX + 4] = rB;
				// [rX + 8] = rC;
				// [rX + 12] = rD;
				// [rX + 16] = rE;
				// [rX + 20] = rF;
				// rX += 24;
			Syntax:  stmia rX, {rA, rB, rC, rD, rE, rF}

		// Form 2:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee ffff  gggg 0000 xxxx 0010
			// Effect:  
				// [rX] = rA;
				// [rX + 4] = rB;
				// [rX + 8] = rC;
				// [rX + 12] = rD;
				// [rX + 16] = rE;
				// [rX + 20] = rF;
				// [rX + 24] = rG;
				// rX += 28;
			Syntax:  stmia rX, {rA, rB, rC, rD, rE, rF, rG}

		// Form 3:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee ffff  gggg hhhh xxxx 0011
			// Effect:  
				// [rX] = rA;
				// [rX + 4] = rB;
				// [rX + 8] = rC;
				// [rX + 12] = rD;
				// [rX + 16] = rE;
				// [rX + 20] = rF;
				// [rX + 24] = rG;
				// [rX + 28] = rH;
				// rX += 32;
			Syntax:  stmia rX, {rA, rB, rC, rD, rE, rF, rG, rH}

		// Unigned 32-bit by 32-bit Multiplication -> Unsigned 64-bit
		// result,
		// where rA is high 32 bits of result, rB is low 32 bits of result
		// $unsigned(rC * rD) -> rA:rB as a pair
		//
		// If rA and rB are the same register, only the low 32 bits of
		// result are stored
		umul rA:rB, rC, rD

		// Signed 32-bit by 32-bit Multiplication -> Signed 64-bit result,
		// where rA is high 32 bits of result, rB is low 32 bits of result
		// $signed(rC * rD) -> rA:rB as a pair
		//
		// If rA and rB are the same register, only the low 32 bits of
		// result are stored
		smul rA:rB, rC, rD


		// Unsigned 64-bit by 64-bit Division -> Unsigned 64-bit Quotient
		// and Unsigned 64-bit Remainder.
		// 
		// Unsigned Divides rE:rF by rG:rH, stores 64-bit unsigned quotient
		// in rA:rB and 64-bit unsigned remainder in rC:rD
		//
		// If rA and rB are the same register, only the low 32 bits of
		// quotient are stored
		//
		// If rC and rD are the same register, only the low 32 bits of the
		// remainder are stored.
		//
		// If rA is the same as either rC or rD, then no remainder will be
		// stored.
		//
		// If rB is the same as either rC or rD, then no remainder will be
		// stored.
		udivmod rA:rB, rC:rD, rE:rF, rG:rH

		// Signed 64-bit by 64-bit Division -> Signed 64-bit Quotient and
		// Signed 64-bit Remainder
		// 
		// Signed Divides rE:rF by rG:rH, stores 64-bit signed quotient in
		// rA:rB and 64-bit signed remainder in rC:rD
		//
		// If rA and rB are the same register, only the low 32 bits of
		// quotient are stored
		//
		// If rC and rD are the same register, only the low 32 bits of the
		// remainder are stored.
		//
		// If rA is the same as either rC or rD, then no remainder will be
		// stored.
		//
		// If rB is the same as either rC or rD, then no remainder will be
		// stored.
		sdivmod rA:rB, rC:rD, rE:rF, rG:rH

		// Unsigned 32-bit by 32-bit Division -> Unsigned 32-bit Quotient
		// and Unsigned 32-bit Remainder
		//
		// Unsigned Divides rC by rD, stores 32-bit unsigned quotient in rA
		// and 32-bit unsigned remainder in rB
		//
		// If rA is the same as rB, then no remainder will be stored.
		udivmod rA, rB, rC, rD

		// Signed 32-bit by 32-bit Division -> Signed 32-bit Quotient and
		// Signed 32-bit Remainder
		//
		// Signed Divides rC by rD, stores 32-bit signed quotient in rA and
		// 32-bit signed remainder in rB
		//
		// If rA is the same as rB, then no remainder will be stored.
		sdivmod rA, rB, rC, rD



		// 64-bit logical shift left by 64-bit register pair
		//
		// rA:rB = rC:rD << rE:rF
		//
		// if rA is the same register as rB, only the low 32 bits of the
		// result will be stored
		lsl rA:rB, rC:rD, rE:rF

		// 64-bit logical shift right by 64-bit register pair
		//
		// rA:rB = $unsigned($unsigned(rC:rD) >> $unsigned(rE:rF))
		//
		// if rA is the same register as rB, only the low 32 bits of the
		// result will be stored
		lsr rA:rB, rC:rD, rE:rF

		// 64-bit arithmetic shift right by 64-bit register pair
		//
		// rA:rB = $signed($signed(rC:rD) >> $signed(rE:rF))
		//
		// if rA is the same register as rB, only the low 32 bits of the
		// result will be stored
		asr rA:rB, rC:rD, rE:rF

		// Reserved for future expansion.



		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.




		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.




		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.

		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.

		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.

		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.



		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.

		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.

		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.

		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.
		// Reserved for future expansion.



		// Pseudo instruction:
		//// Subroutine call using (rA + absolute_addr) as destination address. 
		//// The return address is stored in the link register (lr).
		//// Encoded like this:  calla rA, r0, absolute_addr
		//calla rA, absolute_addr

		// Pseudo instruction:
		//// Subroutine call using (absolute_addr) as destination address. 
		//// The return address is stored in the link register (lr).
		//// Encoded like this:  calla r0, r0, absolute_addr
		//calla absolute_addr

		// Pseudo instruction:
		//// Set pc to destination address in (rA + absolute_addr).
		//// Encoded like this:  jumpa rA, r0, absolute_addr
		//jumpa rA, absolute_addr

		// Pseudo instruction:
		//// Set pc to destination address in (absolute_addr).
		//// Encoded like this:  jumpa r0, r0, absolute_addr
		//jumpa absolute_addr


		// Pseudo instruction:
		//// rA = 32-bit immediate
		//// Encoded like this:  cpypi rA, rA, imm
		//cpyi rA, imm



		// Pseudo instruction:
		// Pop
		// Note that this instruction takes multiple forms
		// Form 0:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee 0000  0000 0000 1111 0000
			// Encoded like this:  ldmia sp, {rA, rB, rC, rD, rE}
			// Effect:  
				// rA = [sp]; 
				// rB = [sp + 4];
				// rC = [sp + 8];
				// rD = [sp + 12];
				// rE = [sp + 16];
				// sp += 20;
			// Syntax:  pop rA, rB, rC, rD, rE

		// Form 1:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee ffff  0000 0000 1111 0001
			// Encoded like this:  ldmia sp, {rA, rB, rC, rD, rE, rF}
			// Effect:  
				// rA = [sp]; 
				// rB = [sp + 4];
				// rC = [sp + 8];
				// rD = [sp + 12];
				// rE = [sp + 16];
				// rF = [sp + 20];
				// sp += 24;
			// Syntax:  pop rA, rB, rC, rD, rE, rF

		// Form 2:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee ffff  gggg 0000 1111 0010
			// Encoded like this:  ldmia sp, {rA, rB, rC, rD, rE, rF, rG}
			// Effect:  
				// rA = [sp]; 
				// rB = [sp + 4];
				// rC = [sp + 8];
				// rD = [sp + 12];
				// rE = [sp + 16];
				// rF = [sp + 20];
				// rG = [sp + 24];
				// sp += 28;
			// Syntax:  pop rA, rB, rC, rD, rE, rF, rG

		// Form 3:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee ffff  gggg hhhh 1111 0011
			// Encoded like this:  ldmia sp, {rA, rB, rC, rD, rE, rF, rG, rH}
			// Effect:  
				// rA = [sp]; 
				// rB = [sp + 4];
				// rC = [sp + 8];
				// rD = [sp + 12];
				// rE = [sp + 16];
				// rF = [sp + 20];
				// rG = [sp + 24];
				// rH = [sp + 28];
				// sp += 32;
			// Syntax:  pop rA, rB, rC, rD, rE, rF, rG, rH


		// Pseudo instruction:
		// Push
		// Note that this instruction takes multiple forms
		// Form 0:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee 0000  0000 0000 1111 0000
			// Encoded like this:  stmdb sp, {rA, rB, rC, rD, rE}
			// Effect:  
				// sp -= 20;
				// [sp] = rA;
				// [sp + 4] = rB;
				// [sp + 8] = rC;
				// [sp + 12] = rD;
				// [sp + 16] = rE;
			// Syntax:  push rA, rB, rC, rD, rE

		// Form 1:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee ffff  0000 0000 1111 0001
			// Encoded like this:  stmdb sp, {rA, rB, rC, rD, rE, rF}
			// Effect:  
				// sp -= 24;
				// [sp] = rA;
				// [sp + 4] = rB;
				// [sp + 8] = rC;
				// [sp + 12] = rD;
				// [sp + 16] = rE;
				// [sp + 20] = rF;
			// Syntax:  push rA, rB, rC, rD, rE, rF

		// Form 2:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee ffff  gggg 0000 1111 0010
			// Encoded like this:  stmdb sp, {rA, rB, rC, rD, rE, rF, rG}
			// Effect:  
				// sp -= 28;
				// [sp] = rA;
				// [sp + 4] = rB;
				// [sp + 8] = rC;
				// [sp + 12] = rD;
				// [sp + 16] = rE;
				// [sp + 20] = rF;
				// [sp + 24] = rG;
			// Syntax:  push rA, rB, rC, rD, rE, rF, rG

		// Form 3:
			// Encoding:  11oo oooo aaaa bbbb  cccc dddd eeee ffff  gggg hhhh 1111 0010
			// Encoded like this:  stmdb sp, {rA, rB, rC, rD, rE, rF, rG, rH}
			// Effect:  
				// sp -= 32;
				// [sp] = rA;
				// [sp + 4] = rB;
				// [sp + 8] = rC;
				// [sp + 12] = rD;
				// [sp + 16] = rE;
				// [sp + 20] = rF;
				// [sp + 24] = rG;
				// [sp + 28] = rH;
			// Syntax:  push rA, rB, rC, rD, rE, rF, rG, rH
