
// Load
task exec_comb_logic_group_0_load;
	prep_read(__instr_dec_out_buf.ldst_req_data_size, 
		__gprs[__instr_dec_out_buf.rb_index]);
endtask

task exec_seq_logic_group_0_load;
	set_wbs_ra(0);
endtask


// Store
task exec_comb_logic_group_0_store;
	// Don't need to keep track of anything for the next cycle
	prep_write(__instr_dec_out_buf.ldst_req_data_size, 
		__gprs[__instr_dec_out_buf.ra_index],
		__gprs[__instr_dec_out_buf.rb_index]);
endtask

task exec_seq_logic_group_0_store;
	// Do nothing
endtask


// Non flags affecting two-register ALU operation
task exec_comb_logic_group_0_nf_alu_op;
	init_alu(__gprs[__instr_dec_out_buf.ra_index],
		__gprs[__instr_dec_out_buf.rb_index],
		ig02_nf_alu_oc_out[`CPU_ENUM_ALU_OPER_SIZE_MSB_POS:0]);
endtask

task exec_seq_logic_group_0_nf_alu_op;
	set_wbs_ra(alu_out.out);
endtask



task exec_comb_logic_group_0_f_alu_op;
	init_alu(__gprs[__instr_dec_out_buf.ra_index],
		__gprs[__instr_dec_out_buf.rb_index],
		ig02_f_alu_oc_out[`CPU_ENUM_ALU_OPER_SIZE_MSB_POS:0]);
endtask

task exec_seq_logic_group_0_f_alu_op;
	set_wbs_ra(alu_out.out);
	set_wbs_flags(alu_out.flags);
endtask



// Enable/disable interrupts
task exec_comb_logic_group_0_eni;
endtask

task exec_seq_logic_group_0_eni;
	//__temp[pkg_temp_ind_0::Eni_Ie] <= 1;
	set_wbs_ints_enabled(1);
endtask


task exec_comb_logic_group_0_dii;
endtask

task exec_seq_logic_group_0_dii;
	//__temp[pkg_temp_ind_0::Dii_Ie] <= 0;
	set_wbs_ints_enabled(0);
endtask



// Return from interrupt (enables interrupts in the process)
task exec_comb_logic_group_0_reti;
endtask


task exec_seq_logic_group_0_reti;
	//__temp[pkg_temp_ind_0::Reti_Pc] <= __spec_regs.ira;
	//__temp[pkg_temp_ind_0::Reti_Ie]<= 1;
	set_wbs_pc(__spec_regs.ira);
	set_wbs_ints_enabled(1);
endtask


// Jump to the Interrupt Return Address without affecting the status of
// whether interrupts are enabled
task exec_comb_logic_group_0_jump_ira;
endtask

task exec_seq_logic_group_0_jump_ira;
	set_wbs_pc(__spec_regs.ira);
endtask


// cpy rA, ira
task exec_comb_logic_group_0_cpy_ra_ira;
endtask

task exec_seq_logic_group_0_cpy_ra_ira;
	set_wbs_ra(__spec_regs.ira);
endtask


// cpy ira, rA
task exec_comb_logic_group_0_cpy_ira_ra;
endtask


task exec_seq_logic_group_0_cpy_ira_ra;
	set_wbs_ira(__gprs[__instr_dec_out_buf.ra_index]);
endtask



// push/pop flags
task exec_comb_logic_group_0_push_flags;
	// sp -= 1;
	// [sp] = flags;
	init_alu(__gprs[pkg_cpu::sp_reg_index], 1, pkg_cpu::Alu_Sub);
	prep_write(pkg_cpu::ReqDataSz8, __spec_regs.flags, alu_out.out);
endtask


task exec_seq_logic_group_0_push_flags;
	// sp -= 1;
	// [sp] = flags;
	set_wbs_sp(alu_out.out);
endtask


task exec_comb_logic_group_0_pop_flags;
	// flags = [sp];
	// sp += 1;
	init_alu(__gprs[pkg_cpu::sp_reg_index], 1, pkg_cpu::Alu_Add);
	prep_read(pkg_cpu::ReqDataSz8, __gprs[pkg_cpu::sp_reg_index]);
endtask


task exec_seq_logic_group_0_pop_flags;
	// flags = [sp];
	// sp += 1;
	set_wbs_sp(alu_out.out);
endtask



// cpy rA, flags
task exec_comb_logic_group_0_cpy_ra_flags;
endtask

task exec_seq_logic_group_0_cpy_ra_flags;
	set_wbs_ra(__spec_regs.flags);
endtask


// cpy flags, rA
task exec_comb_logic_group_0_cpy_flags_ra;
endtask

task exec_seq_logic_group_0_cpy_flags_ra;
	set_wbs_flags(__gprs[__instr_dec_out_buf.ra_index]);
endtask


// call/jump to address contained in (rA + rB)
task exec_comb_logic_group_0_callx_ra_rb;
	init_alu(__gprs[__instr_dec_out_buf.ra_index],
		__gprs[__instr_dec_out_buf.rb_index], pkg_cpu::Alu_Add);
endtask

task exec_seq_logic_group_0_callx_ra_rb;
	set_wbs_lr(__spec_regs.pc);
	set_wbs_pc(alu_out.out);
endtask


task exec_comb_logic_group_0_jumpx_ra_rb;
	init_alu(__gprs[__instr_dec_out_buf.ra_index],
		__gprs[__instr_dec_out_buf.rb_index], pkg_cpu::Alu_Add);
endtask

task exec_seq_logic_group_0_jumpx_ra_rb;
	set_wbs_pc(alu_out.out);
endtask



// cpy rA, pc
task exec_comb_logic_group_0_cpy_ra_pc;
endtask

task exec_seq_logic_group_0_cpy_ra_pc;
	set_wbs_ra(__spec_regs.pc);
endtask


// cpy rA, rB
task exec_comb_logic_group_0_cpy_ra_rb;
endtask


task exec_seq_logic_group_0_cpy_ra_rb;
	set_wbs_ra(__gprs[__instr_dec_out_buf.rb_index]);
endtask




// Sign extend
task exec_comb_logic_group_0_seh_ra_rb;
endtask


task exec_seq_logic_group_0_seh_ra_rb;
	set_wbs_ra(ig0_seh_signext16_out);
endtask



task exec_comb_logic_group_0_seb_ra_rb;
endtask

task exec_seq_logic_group_0_seb_ra_rb;
	set_wbs_ra(ig0_seb_signext8_out);
endtask



// Compare rA to rB
task exec_comb_logic_group_0_cmp_ra_rb;
	init_alu(__gprs[__instr_dec_out_buf.ra_index],
		__gprs[__instr_dec_out_buf.rb_index],
		pkg_cpu::Alu_Sub);
endtask

task exec_seq_logic_group_0_cmp_ra_rb;
	set_wbs_flags(alu_out.flags);
endtask
